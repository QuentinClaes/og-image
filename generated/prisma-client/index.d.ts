// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  contract: (where?: ContractWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  newsletter: (where?: NewsletterWhereInput) => Promise<boolean>;
  priceCategory: (where?: PriceCategoryWhereInput) => Promise<boolean>;
  provider: (where?: ProviderWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  socialMedia: (where?: SocialMediaWhereInput) => Promise<boolean>;
  subCategory: (where?: SubCategoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  contract: (where: ContractWhereUniqueInput) => ContractNullablePromise;
  contracts: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contract>;
  contractsConnection: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContractConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  newsletter: (where: NewsletterWhereUniqueInput) => NewsletterNullablePromise;
  newsletters: (args?: {
    where?: NewsletterWhereInput;
    orderBy?: NewsletterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Newsletter>;
  newslettersConnection: (args?: {
    where?: NewsletterWhereInput;
    orderBy?: NewsletterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NewsletterConnectionPromise;
  priceCategory: (
    where: PriceCategoryWhereUniqueInput
  ) => PriceCategoryNullablePromise;
  priceCategories: (args?: {
    where?: PriceCategoryWhereInput;
    orderBy?: PriceCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PriceCategory>;
  priceCategoriesConnection: (args?: {
    where?: PriceCategoryWhereInput;
    orderBy?: PriceCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PriceCategoryConnectionPromise;
  provider: (where: ProviderWhereUniqueInput) => ProviderNullablePromise;
  providers: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Provider>;
  providersConnection: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProviderConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  socialMedia: (
    where: SocialMediaWhereUniqueInput
  ) => SocialMediaNullablePromise;
  socialMedias: (args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialMedia>;
  socialMediasConnection: (args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialMediaConnectionPromise;
  subCategory: (
    where: SubCategoryWhereUniqueInput
  ) => SubCategoryNullablePromise;
  subCategories: (args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubCategory>;
  subCategoriesConnection: (args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubCategoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createContract: (data: ContractCreateInput) => ContractPromise;
  updateContract: (args: {
    data: ContractUpdateInput;
    where: ContractWhereUniqueInput;
  }) => ContractPromise;
  updateManyContracts: (args: {
    data: ContractUpdateManyMutationInput;
    where?: ContractWhereInput;
  }) => BatchPayloadPromise;
  upsertContract: (args: {
    where: ContractWhereUniqueInput;
    create: ContractCreateInput;
    update: ContractUpdateInput;
  }) => ContractPromise;
  deleteContract: (where: ContractWhereUniqueInput) => ContractPromise;
  deleteManyContracts: (where?: ContractWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createNewsletter: (data: NewsletterCreateInput) => NewsletterPromise;
  updateNewsletter: (args: {
    data: NewsletterUpdateInput;
    where: NewsletterWhereUniqueInput;
  }) => NewsletterPromise;
  updateManyNewsletters: (args: {
    data: NewsletterUpdateManyMutationInput;
    where?: NewsletterWhereInput;
  }) => BatchPayloadPromise;
  upsertNewsletter: (args: {
    where: NewsletterWhereUniqueInput;
    create: NewsletterCreateInput;
    update: NewsletterUpdateInput;
  }) => NewsletterPromise;
  deleteNewsletter: (where: NewsletterWhereUniqueInput) => NewsletterPromise;
  deleteManyNewsletters: (where?: NewsletterWhereInput) => BatchPayloadPromise;
  createPriceCategory: (data: PriceCategoryCreateInput) => PriceCategoryPromise;
  updatePriceCategory: (args: {
    data: PriceCategoryUpdateInput;
    where: PriceCategoryWhereUniqueInput;
  }) => PriceCategoryPromise;
  updateManyPriceCategories: (args: {
    data: PriceCategoryUpdateManyMutationInput;
    where?: PriceCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertPriceCategory: (args: {
    where: PriceCategoryWhereUniqueInput;
    create: PriceCategoryCreateInput;
    update: PriceCategoryUpdateInput;
  }) => PriceCategoryPromise;
  deletePriceCategory: (
    where: PriceCategoryWhereUniqueInput
  ) => PriceCategoryPromise;
  deleteManyPriceCategories: (
    where?: PriceCategoryWhereInput
  ) => BatchPayloadPromise;
  createProvider: (data: ProviderCreateInput) => ProviderPromise;
  updateProvider: (args: {
    data: ProviderUpdateInput;
    where: ProviderWhereUniqueInput;
  }) => ProviderPromise;
  updateManyProviders: (args: {
    data: ProviderUpdateManyMutationInput;
    where?: ProviderWhereInput;
  }) => BatchPayloadPromise;
  upsertProvider: (args: {
    where: ProviderWhereUniqueInput;
    create: ProviderCreateInput;
    update: ProviderUpdateInput;
  }) => ProviderPromise;
  deleteProvider: (where: ProviderWhereUniqueInput) => ProviderPromise;
  deleteManyProviders: (where?: ProviderWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createSocialMedia: (data: SocialMediaCreateInput) => SocialMediaPromise;
  updateSocialMedia: (args: {
    data: SocialMediaUpdateInput;
    where: SocialMediaWhereUniqueInput;
  }) => SocialMediaPromise;
  updateManySocialMedias: (args: {
    data: SocialMediaUpdateManyMutationInput;
    where?: SocialMediaWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialMedia: (args: {
    where: SocialMediaWhereUniqueInput;
    create: SocialMediaCreateInput;
    update: SocialMediaUpdateInput;
  }) => SocialMediaPromise;
  deleteSocialMedia: (where: SocialMediaWhereUniqueInput) => SocialMediaPromise;
  deleteManySocialMedias: (
    where?: SocialMediaWhereInput
  ) => BatchPayloadPromise;
  createSubCategory: (data: SubCategoryCreateInput) => SubCategoryPromise;
  updateSubCategory: (args: {
    data: SubCategoryUpdateInput;
    where: SubCategoryWhereUniqueInput;
  }) => SubCategoryPromise;
  updateManySubCategories: (args: {
    data: SubCategoryUpdateManyMutationInput;
    where?: SubCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertSubCategory: (args: {
    where: SubCategoryWhereUniqueInput;
    create: SubCategoryCreateInput;
    update: SubCategoryUpdateInput;
  }) => SubCategoryPromise;
  deleteSubCategory: (where: SubCategoryWhereUniqueInput) => SubCategoryPromise;
  deleteManySubCategories: (
    where?: SubCategoryWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  contract: (
    where?: ContractSubscriptionWhereInput
  ) => ContractSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  newsletter: (
    where?: NewsletterSubscriptionWhereInput
  ) => NewsletterSubscriptionPayloadSubscription;
  priceCategory: (
    where?: PriceCategorySubscriptionWhereInput
  ) => PriceCategorySubscriptionPayloadSubscription;
  provider: (
    where?: ProviderSubscriptionWhereInput
  ) => ProviderSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  socialMedia: (
    where?: SocialMediaSubscriptionWhereInput
  ) => SocialMediaSubscriptionPayloadSubscription;
  subCategory: (
    where?: SubCategorySubscriptionWhereInput
  ) => SubCategorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ContractOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "accountManagerEmail_ASC"
  | "accountManagerEmail_DESC"
  | "accountManagerGSM_ASC"
  | "accountManagerGSM_DESC"
  | "accountManagerName_ASC"
  | "accountManagerName_DESC"
  | "accountManagerPhone_ASC"
  | "accountManagerPhone_DESC"
  | "clientNumber_ASC"
  | "clientNumber_DESC"
  | "contractAutoReconduct_ASC"
  | "contractAutoReconduct_DESC"
  | "contractBudget_ASC"
  | "contractBudget_DESC"
  | "contractEndingAlert_ASC"
  | "contractEndingAlert_DESC"
  | "contractEndingAlertTime_ASC"
  | "contractEndingAlertTime_DESC"
  | "contractID_ASC"
  | "contractID_DESC"
  | "contractNumber_ASC"
  | "contractNumber_DESC"
  | "contractPreavis_ASC"
  | "contractPreavis_DESC"
  | "contractStart_ASC"
  | "contractStart_DESC"
  | "contractTime_ASC"
  | "contractTime_DESC"
  | "contractType_ASC"
  | "contractType_DESC"
  | "selectionID_ASC"
  | "selectionID_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "contentEn_ASC"
  | "contentEn_DESC"
  | "contentFr_ASC"
  | "contentFr_DESC"
  | "contentNl_ASC"
  | "contentNl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "originalLang_ASC"
  | "originalLang_DESC"
  | "pricing_ASC"
  | "pricing_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "reply_ASC"
  | "reply_DESC"
  | "replyCreatedAt_ASC"
  | "replyCreatedAt_DESC"
  | "replyEn_ASC"
  | "replyEn_DESC"
  | "replyFr_ASC"
  | "replyFr_DESC"
  | "replyNl_ASC"
  | "replyNl_DESC"
  | "replyOriginal_ASC"
  | "replyOriginal_DESC"
  | "title_ASC"
  | "title_DESC"
  | "titleEn_ASC"
  | "titleEn_DESC"
  | "titleFr_ASC"
  | "titleFr_DESC"
  | "titleNl_ASC"
  | "titleNl_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "upvote_ASC"
  | "upvote_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nameFr_ASC"
  | "nameFr_DESC"
  | "nameNl_ASC"
  | "nameNl_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "contact_ASC"
  | "contact_DESC"
  | "contactEmail_ASC"
  | "contactEmail_DESC"
  | "contacten_ASC"
  | "contacten_DESC"
  | "contactfr_ASC"
  | "contactfr_DESC"
  | "contactnl_ASC"
  | "contactnl_DESC"
  | "countryId_ASC"
  | "countryId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailen_ASC"
  | "emailen_DESC"
  | "emailfr_ASC"
  | "emailfr_DESC"
  | "emailnl_ASC"
  | "emailnl_DESC"
  | "faq_ASC"
  | "faq_DESC"
  | "faqen_ASC"
  | "faqen_DESC"
  | "faqfr_ASC"
  | "faqfr_DESC"
  | "faqnl_ASC"
  | "faqnl_DESC"
  | "login_ASC"
  | "login_DESC"
  | "loginen_ASC"
  | "loginen_DESC"
  | "loginfr_ASC"
  | "loginfr_DESC"
  | "loginnl_ASC"
  | "loginnl_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "phoneen_ASC"
  | "phoneen_DESC"
  | "phonefr_ASC"
  | "phonefr_DESC"
  | "phonenl_ASC"
  | "phonenl_DESC"
  | "pricingAVG_ASC"
  | "pricingAVG_DESC"
  | "ratingAVG_ASC"
  | "ratingAVG_DESC"
  | "shops_ASC"
  | "shops_DESC"
  | "site_ASC"
  | "site_DESC"
  | "siteen_ASC"
  | "siteen_DESC"
  | "sitefr_ASC"
  | "sitefr_DESC"
  | "sitenl_ASC"
  | "sitenl_DESC"
  | "street_ASC"
  | "street_DESC"
  | "test_ASC"
  | "test_DESC"
  | "testJson_ASC"
  | "testJson_DESC"
  | "tva_ASC"
  | "tva_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "widgetId_ASC"
  | "widgetId_DESC"
  | "zip_ASC"
  | "zip_DESC";

export type SocialMediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "facebook_ASC"
  | "facebook_DESC"
  | "linkedin_ASC"
  | "linkedin_DESC"
  | "twitter_ASC"
  | "twitter_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "allowedToConnect_ASC"
  | "allowedToConnect_DESC"
  | "changedPwd_ASC"
  | "changedPwd_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "givenName_ASC"
  | "givenName_DESC"
  | "lang_ASC"
  | "lang_DESC"
  | "lastlogin_ASC"
  | "lastlogin_DESC"
  | "name_ASC"
  | "name_DESC"
  | "numberlogin_ASC"
  | "numberlogin_DESC"
  | "tempPwd_ASC"
  | "tempPwd_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "companyAddress_ASC"
  | "companyAddress_DESC"
  | "companyCity_ASC"
  | "companyCity_DESC"
  | "companyCountry_ASC"
  | "companyCountry_DESC"
  | "companyEmployee_ASC"
  | "companyEmployee_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "companyPhone_ASC"
  | "companyPhone_DESC"
  | "companySize_ASC"
  | "companySize_DESC"
  | "companyTva_ASC"
  | "companyTva_DESC"
  | "companyWebsite_ASC"
  | "companyWebsite_DESC"
  | "companyZip_ASC"
  | "companyZip_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailPro_ASC"
  | "emailPro_DESC"
  | "familyName_ASC"
  | "familyName_DESC"
  | "favProvs_ASC"
  | "favProvs_DESC"
  | "givenName_ASC"
  | "givenName_DESC"
  | "gsm_ASC"
  | "gsm_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "lang_ASC"
  | "lang_DESC"
  | "lastlogin_ASC"
  | "lastlogin_DESC"
  | "name_ASC"
  | "name_DESC"
  | "numberlogin_ASC"
  | "numberlogin_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "title_ASC"
  | "title_DESC"
  | "tuto_ASC"
  | "tuto_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type NewsletterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC";

export type PriceCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type SubCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "photo_ASC"
  | "photo_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ContractWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  accountManagerEmail?: Maybe<String>;
  accountManagerEmail_not?: Maybe<String>;
  accountManagerEmail_in?: Maybe<String[] | String>;
  accountManagerEmail_not_in?: Maybe<String[] | String>;
  accountManagerEmail_lt?: Maybe<String>;
  accountManagerEmail_lte?: Maybe<String>;
  accountManagerEmail_gt?: Maybe<String>;
  accountManagerEmail_gte?: Maybe<String>;
  accountManagerEmail_contains?: Maybe<String>;
  accountManagerEmail_not_contains?: Maybe<String>;
  accountManagerEmail_starts_with?: Maybe<String>;
  accountManagerEmail_not_starts_with?: Maybe<String>;
  accountManagerEmail_ends_with?: Maybe<String>;
  accountManagerEmail_not_ends_with?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerGSM_not?: Maybe<String>;
  accountManagerGSM_in?: Maybe<String[] | String>;
  accountManagerGSM_not_in?: Maybe<String[] | String>;
  accountManagerGSM_lt?: Maybe<String>;
  accountManagerGSM_lte?: Maybe<String>;
  accountManagerGSM_gt?: Maybe<String>;
  accountManagerGSM_gte?: Maybe<String>;
  accountManagerGSM_contains?: Maybe<String>;
  accountManagerGSM_not_contains?: Maybe<String>;
  accountManagerGSM_starts_with?: Maybe<String>;
  accountManagerGSM_not_starts_with?: Maybe<String>;
  accountManagerGSM_ends_with?: Maybe<String>;
  accountManagerGSM_not_ends_with?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerName_not?: Maybe<String>;
  accountManagerName_in?: Maybe<String[] | String>;
  accountManagerName_not_in?: Maybe<String[] | String>;
  accountManagerName_lt?: Maybe<String>;
  accountManagerName_lte?: Maybe<String>;
  accountManagerName_gt?: Maybe<String>;
  accountManagerName_gte?: Maybe<String>;
  accountManagerName_contains?: Maybe<String>;
  accountManagerName_not_contains?: Maybe<String>;
  accountManagerName_starts_with?: Maybe<String>;
  accountManagerName_not_starts_with?: Maybe<String>;
  accountManagerName_ends_with?: Maybe<String>;
  accountManagerName_not_ends_with?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  accountManagerPhone_not?: Maybe<String>;
  accountManagerPhone_in?: Maybe<String[] | String>;
  accountManagerPhone_not_in?: Maybe<String[] | String>;
  accountManagerPhone_lt?: Maybe<String>;
  accountManagerPhone_lte?: Maybe<String>;
  accountManagerPhone_gt?: Maybe<String>;
  accountManagerPhone_gte?: Maybe<String>;
  accountManagerPhone_contains?: Maybe<String>;
  accountManagerPhone_not_contains?: Maybe<String>;
  accountManagerPhone_starts_with?: Maybe<String>;
  accountManagerPhone_not_starts_with?: Maybe<String>;
  accountManagerPhone_ends_with?: Maybe<String>;
  accountManagerPhone_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryWhereInput>;
  clientNumber?: Maybe<String>;
  clientNumber_not?: Maybe<String>;
  clientNumber_in?: Maybe<String[] | String>;
  clientNumber_not_in?: Maybe<String[] | String>;
  clientNumber_lt?: Maybe<String>;
  clientNumber_lte?: Maybe<String>;
  clientNumber_gt?: Maybe<String>;
  clientNumber_gte?: Maybe<String>;
  clientNumber_contains?: Maybe<String>;
  clientNumber_not_contains?: Maybe<String>;
  clientNumber_starts_with?: Maybe<String>;
  clientNumber_not_starts_with?: Maybe<String>;
  clientNumber_ends_with?: Maybe<String>;
  clientNumber_not_ends_with?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractAutoReconduct_not?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractBudget_not?: Maybe<Float>;
  contractBudget_in?: Maybe<Float[] | Float>;
  contractBudget_not_in?: Maybe<Float[] | Float>;
  contractBudget_lt?: Maybe<Float>;
  contractBudget_lte?: Maybe<Float>;
  contractBudget_gt?: Maybe<Float>;
  contractBudget_gte?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlert_not?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractEndingAlertTime_not?: Maybe<Int>;
  contractEndingAlertTime_in?: Maybe<Int[] | Int>;
  contractEndingAlertTime_not_in?: Maybe<Int[] | Int>;
  contractEndingAlertTime_lt?: Maybe<Int>;
  contractEndingAlertTime_lte?: Maybe<Int>;
  contractEndingAlertTime_gt?: Maybe<Int>;
  contractEndingAlertTime_gte?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractID_not?: Maybe<String>;
  contractID_in?: Maybe<String[] | String>;
  contractID_not_in?: Maybe<String[] | String>;
  contractID_lt?: Maybe<String>;
  contractID_lte?: Maybe<String>;
  contractID_gt?: Maybe<String>;
  contractID_gte?: Maybe<String>;
  contractID_contains?: Maybe<String>;
  contractID_not_contains?: Maybe<String>;
  contractID_starts_with?: Maybe<String>;
  contractID_not_starts_with?: Maybe<String>;
  contractID_ends_with?: Maybe<String>;
  contractID_not_ends_with?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractNumber_not?: Maybe<String>;
  contractNumber_in?: Maybe<String[] | String>;
  contractNumber_not_in?: Maybe<String[] | String>;
  contractNumber_lt?: Maybe<String>;
  contractNumber_lte?: Maybe<String>;
  contractNumber_gt?: Maybe<String>;
  contractNumber_gte?: Maybe<String>;
  contractNumber_contains?: Maybe<String>;
  contractNumber_not_contains?: Maybe<String>;
  contractNumber_starts_with?: Maybe<String>;
  contractNumber_not_starts_with?: Maybe<String>;
  contractNumber_ends_with?: Maybe<String>;
  contractNumber_not_ends_with?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractPreavis_not?: Maybe<Int>;
  contractPreavis_in?: Maybe<Int[] | Int>;
  contractPreavis_not_in?: Maybe<Int[] | Int>;
  contractPreavis_lt?: Maybe<Int>;
  contractPreavis_lte?: Maybe<Int>;
  contractPreavis_gt?: Maybe<Int>;
  contractPreavis_gte?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractStart_not?: Maybe<DateTimeInput>;
  contractStart_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contractStart_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contractStart_lt?: Maybe<DateTimeInput>;
  contractStart_lte?: Maybe<DateTimeInput>;
  contractStart_gt?: Maybe<DateTimeInput>;
  contractStart_gte?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractTime_not?: Maybe<Int>;
  contractTime_in?: Maybe<Int[] | Int>;
  contractTime_not_in?: Maybe<Int[] | Int>;
  contractTime_lt?: Maybe<Int>;
  contractTime_lte?: Maybe<Int>;
  contractTime_gt?: Maybe<Int>;
  contractTime_gte?: Maybe<Int>;
  contractType?: Maybe<String>;
  contractType_not?: Maybe<String>;
  contractType_in?: Maybe<String[] | String>;
  contractType_not_in?: Maybe<String[] | String>;
  contractType_lt?: Maybe<String>;
  contractType_lte?: Maybe<String>;
  contractType_gt?: Maybe<String>;
  contractType_gte?: Maybe<String>;
  contractType_contains?: Maybe<String>;
  contractType_not_contains?: Maybe<String>;
  contractType_starts_with?: Maybe<String>;
  contractType_not_starts_with?: Maybe<String>;
  contractType_ends_with?: Maybe<String>;
  contractType_not_ends_with?: Maybe<String>;
  customer?: Maybe<CustomerWhereInput>;
  provider?: Maybe<ProviderWhereInput>;
  selectionID?: Maybe<String>;
  selectionID_not?: Maybe<String>;
  selectionID_in?: Maybe<String[] | String>;
  selectionID_not_in?: Maybe<String[] | String>;
  selectionID_lt?: Maybe<String>;
  selectionID_lte?: Maybe<String>;
  selectionID_gt?: Maybe<String>;
  selectionID_gte?: Maybe<String>;
  selectionID_contains?: Maybe<String>;
  selectionID_not_contains?: Maybe<String>;
  selectionID_starts_with?: Maybe<String>;
  selectionID_not_starts_with?: Maybe<String>;
  selectionID_ends_with?: Maybe<String>;
  selectionID_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  OR?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  NOT?: Maybe<ContractWhereInput[] | ContractWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  contract_every?: Maybe<ContractWhereInput>;
  contract_some?: Maybe<ContractWhereInput>;
  contract_none?: Maybe<ContractWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameFr_not?: Maybe<String>;
  nameFr_in?: Maybe<String[] | String>;
  nameFr_not_in?: Maybe<String[] | String>;
  nameFr_lt?: Maybe<String>;
  nameFr_lte?: Maybe<String>;
  nameFr_gt?: Maybe<String>;
  nameFr_gte?: Maybe<String>;
  nameFr_contains?: Maybe<String>;
  nameFr_not_contains?: Maybe<String>;
  nameFr_starts_with?: Maybe<String>;
  nameFr_not_starts_with?: Maybe<String>;
  nameFr_ends_with?: Maybe<String>;
  nameFr_not_ends_with?: Maybe<String>;
  nameNl?: Maybe<String>;
  nameNl_not?: Maybe<String>;
  nameNl_in?: Maybe<String[] | String>;
  nameNl_not_in?: Maybe<String[] | String>;
  nameNl_lt?: Maybe<String>;
  nameNl_lte?: Maybe<String>;
  nameNl_gt?: Maybe<String>;
  nameNl_gte?: Maybe<String>;
  nameNl_contains?: Maybe<String>;
  nameNl_not_contains?: Maybe<String>;
  nameNl_starts_with?: Maybe<String>;
  nameNl_not_starts_with?: Maybe<String>;
  nameNl_ends_with?: Maybe<String>;
  nameNl_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  provider_every?: Maybe<ProviderWhereInput>;
  provider_some?: Maybe<ProviderWhereInput>;
  provider_none?: Maybe<ProviderWhereInput>;
  subcategory?: Maybe<SubCategoryWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface ProviderWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  category_every?: Maybe<CategoryWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  category_none?: Maybe<CategoryWhereInput>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contactEmail_not?: Maybe<String>;
  contactEmail_in?: Maybe<String[] | String>;
  contactEmail_not_in?: Maybe<String[] | String>;
  contactEmail_lt?: Maybe<String>;
  contactEmail_lte?: Maybe<String>;
  contactEmail_gt?: Maybe<String>;
  contactEmail_gte?: Maybe<String>;
  contactEmail_contains?: Maybe<String>;
  contactEmail_not_contains?: Maybe<String>;
  contactEmail_starts_with?: Maybe<String>;
  contactEmail_not_starts_with?: Maybe<String>;
  contactEmail_ends_with?: Maybe<String>;
  contactEmail_not_ends_with?: Maybe<String>;
  contacten?: Maybe<String>;
  contacten_not?: Maybe<String>;
  contacten_in?: Maybe<String[] | String>;
  contacten_not_in?: Maybe<String[] | String>;
  contacten_lt?: Maybe<String>;
  contacten_lte?: Maybe<String>;
  contacten_gt?: Maybe<String>;
  contacten_gte?: Maybe<String>;
  contacten_contains?: Maybe<String>;
  contacten_not_contains?: Maybe<String>;
  contacten_starts_with?: Maybe<String>;
  contacten_not_starts_with?: Maybe<String>;
  contacten_ends_with?: Maybe<String>;
  contacten_not_ends_with?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactfr_not?: Maybe<String>;
  contactfr_in?: Maybe<String[] | String>;
  contactfr_not_in?: Maybe<String[] | String>;
  contactfr_lt?: Maybe<String>;
  contactfr_lte?: Maybe<String>;
  contactfr_gt?: Maybe<String>;
  contactfr_gte?: Maybe<String>;
  contactfr_contains?: Maybe<String>;
  contactfr_not_contains?: Maybe<String>;
  contactfr_starts_with?: Maybe<String>;
  contactfr_not_starts_with?: Maybe<String>;
  contactfr_ends_with?: Maybe<String>;
  contactfr_not_ends_with?: Maybe<String>;
  contactnl?: Maybe<String>;
  contactnl_not?: Maybe<String>;
  contactnl_in?: Maybe<String[] | String>;
  contactnl_not_in?: Maybe<String[] | String>;
  contactnl_lt?: Maybe<String>;
  contactnl_lte?: Maybe<String>;
  contactnl_gt?: Maybe<String>;
  contactnl_gte?: Maybe<String>;
  contactnl_contains?: Maybe<String>;
  contactnl_not_contains?: Maybe<String>;
  contactnl_starts_with?: Maybe<String>;
  contactnl_not_starts_with?: Maybe<String>;
  contactnl_ends_with?: Maybe<String>;
  contactnl_not_ends_with?: Maybe<String>;
  contract_every?: Maybe<ContractWhereInput>;
  contract_some?: Maybe<ContractWhereInput>;
  contract_none?: Maybe<ContractWhereInput>;
  countryId?: Maybe<Int>;
  countryId_not?: Maybe<Int>;
  countryId_in?: Maybe<Int[] | Int>;
  countryId_not_in?: Maybe<Int[] | Int>;
  countryId_lt?: Maybe<Int>;
  countryId_lte?: Maybe<Int>;
  countryId_gt?: Maybe<Int>;
  countryId_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  emailen?: Maybe<String>;
  emailen_not?: Maybe<String>;
  emailen_in?: Maybe<String[] | String>;
  emailen_not_in?: Maybe<String[] | String>;
  emailen_lt?: Maybe<String>;
  emailen_lte?: Maybe<String>;
  emailen_gt?: Maybe<String>;
  emailen_gte?: Maybe<String>;
  emailen_contains?: Maybe<String>;
  emailen_not_contains?: Maybe<String>;
  emailen_starts_with?: Maybe<String>;
  emailen_not_starts_with?: Maybe<String>;
  emailen_ends_with?: Maybe<String>;
  emailen_not_ends_with?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailfr_not?: Maybe<String>;
  emailfr_in?: Maybe<String[] | String>;
  emailfr_not_in?: Maybe<String[] | String>;
  emailfr_lt?: Maybe<String>;
  emailfr_lte?: Maybe<String>;
  emailfr_gt?: Maybe<String>;
  emailfr_gte?: Maybe<String>;
  emailfr_contains?: Maybe<String>;
  emailfr_not_contains?: Maybe<String>;
  emailfr_starts_with?: Maybe<String>;
  emailfr_not_starts_with?: Maybe<String>;
  emailfr_ends_with?: Maybe<String>;
  emailfr_not_ends_with?: Maybe<String>;
  emailnl?: Maybe<String>;
  emailnl_not?: Maybe<String>;
  emailnl_in?: Maybe<String[] | String>;
  emailnl_not_in?: Maybe<String[] | String>;
  emailnl_lt?: Maybe<String>;
  emailnl_lte?: Maybe<String>;
  emailnl_gt?: Maybe<String>;
  emailnl_gte?: Maybe<String>;
  emailnl_contains?: Maybe<String>;
  emailnl_not_contains?: Maybe<String>;
  emailnl_starts_with?: Maybe<String>;
  emailnl_not_starts_with?: Maybe<String>;
  emailnl_ends_with?: Maybe<String>;
  emailnl_not_ends_with?: Maybe<String>;
  faq?: Maybe<String>;
  faq_not?: Maybe<String>;
  faq_in?: Maybe<String[] | String>;
  faq_not_in?: Maybe<String[] | String>;
  faq_lt?: Maybe<String>;
  faq_lte?: Maybe<String>;
  faq_gt?: Maybe<String>;
  faq_gte?: Maybe<String>;
  faq_contains?: Maybe<String>;
  faq_not_contains?: Maybe<String>;
  faq_starts_with?: Maybe<String>;
  faq_not_starts_with?: Maybe<String>;
  faq_ends_with?: Maybe<String>;
  faq_not_ends_with?: Maybe<String>;
  faqen?: Maybe<String>;
  faqen_not?: Maybe<String>;
  faqen_in?: Maybe<String[] | String>;
  faqen_not_in?: Maybe<String[] | String>;
  faqen_lt?: Maybe<String>;
  faqen_lte?: Maybe<String>;
  faqen_gt?: Maybe<String>;
  faqen_gte?: Maybe<String>;
  faqen_contains?: Maybe<String>;
  faqen_not_contains?: Maybe<String>;
  faqen_starts_with?: Maybe<String>;
  faqen_not_starts_with?: Maybe<String>;
  faqen_ends_with?: Maybe<String>;
  faqen_not_ends_with?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqfr_not?: Maybe<String>;
  faqfr_in?: Maybe<String[] | String>;
  faqfr_not_in?: Maybe<String[] | String>;
  faqfr_lt?: Maybe<String>;
  faqfr_lte?: Maybe<String>;
  faqfr_gt?: Maybe<String>;
  faqfr_gte?: Maybe<String>;
  faqfr_contains?: Maybe<String>;
  faqfr_not_contains?: Maybe<String>;
  faqfr_starts_with?: Maybe<String>;
  faqfr_not_starts_with?: Maybe<String>;
  faqfr_ends_with?: Maybe<String>;
  faqfr_not_ends_with?: Maybe<String>;
  faqnl?: Maybe<String>;
  faqnl_not?: Maybe<String>;
  faqnl_in?: Maybe<String[] | String>;
  faqnl_not_in?: Maybe<String[] | String>;
  faqnl_lt?: Maybe<String>;
  faqnl_lte?: Maybe<String>;
  faqnl_gt?: Maybe<String>;
  faqnl_gte?: Maybe<String>;
  faqnl_contains?: Maybe<String>;
  faqnl_not_contains?: Maybe<String>;
  faqnl_starts_with?: Maybe<String>;
  faqnl_not_starts_with?: Maybe<String>;
  faqnl_ends_with?: Maybe<String>;
  faqnl_not_ends_with?: Maybe<String>;
  login?: Maybe<String>;
  login_not?: Maybe<String>;
  login_in?: Maybe<String[] | String>;
  login_not_in?: Maybe<String[] | String>;
  login_lt?: Maybe<String>;
  login_lte?: Maybe<String>;
  login_gt?: Maybe<String>;
  login_gte?: Maybe<String>;
  login_contains?: Maybe<String>;
  login_not_contains?: Maybe<String>;
  login_starts_with?: Maybe<String>;
  login_not_starts_with?: Maybe<String>;
  login_ends_with?: Maybe<String>;
  login_not_ends_with?: Maybe<String>;
  loginen?: Maybe<String>;
  loginen_not?: Maybe<String>;
  loginen_in?: Maybe<String[] | String>;
  loginen_not_in?: Maybe<String[] | String>;
  loginen_lt?: Maybe<String>;
  loginen_lte?: Maybe<String>;
  loginen_gt?: Maybe<String>;
  loginen_gte?: Maybe<String>;
  loginen_contains?: Maybe<String>;
  loginen_not_contains?: Maybe<String>;
  loginen_starts_with?: Maybe<String>;
  loginen_not_starts_with?: Maybe<String>;
  loginen_ends_with?: Maybe<String>;
  loginen_not_ends_with?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginfr_not?: Maybe<String>;
  loginfr_in?: Maybe<String[] | String>;
  loginfr_not_in?: Maybe<String[] | String>;
  loginfr_lt?: Maybe<String>;
  loginfr_lte?: Maybe<String>;
  loginfr_gt?: Maybe<String>;
  loginfr_gte?: Maybe<String>;
  loginfr_contains?: Maybe<String>;
  loginfr_not_contains?: Maybe<String>;
  loginfr_starts_with?: Maybe<String>;
  loginfr_not_starts_with?: Maybe<String>;
  loginfr_ends_with?: Maybe<String>;
  loginfr_not_ends_with?: Maybe<String>;
  loginnl?: Maybe<String>;
  loginnl_not?: Maybe<String>;
  loginnl_in?: Maybe<String[] | String>;
  loginnl_not_in?: Maybe<String[] | String>;
  loginnl_lt?: Maybe<String>;
  loginnl_lte?: Maybe<String>;
  loginnl_gt?: Maybe<String>;
  loginnl_gte?: Maybe<String>;
  loginnl_contains?: Maybe<String>;
  loginnl_not_contains?: Maybe<String>;
  loginnl_starts_with?: Maybe<String>;
  loginnl_not_starts_with?: Maybe<String>;
  loginnl_ends_with?: Maybe<String>;
  loginnl_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  phoneen?: Maybe<String>;
  phoneen_not?: Maybe<String>;
  phoneen_in?: Maybe<String[] | String>;
  phoneen_not_in?: Maybe<String[] | String>;
  phoneen_lt?: Maybe<String>;
  phoneen_lte?: Maybe<String>;
  phoneen_gt?: Maybe<String>;
  phoneen_gte?: Maybe<String>;
  phoneen_contains?: Maybe<String>;
  phoneen_not_contains?: Maybe<String>;
  phoneen_starts_with?: Maybe<String>;
  phoneen_not_starts_with?: Maybe<String>;
  phoneen_ends_with?: Maybe<String>;
  phoneen_not_ends_with?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonefr_not?: Maybe<String>;
  phonefr_in?: Maybe<String[] | String>;
  phonefr_not_in?: Maybe<String[] | String>;
  phonefr_lt?: Maybe<String>;
  phonefr_lte?: Maybe<String>;
  phonefr_gt?: Maybe<String>;
  phonefr_gte?: Maybe<String>;
  phonefr_contains?: Maybe<String>;
  phonefr_not_contains?: Maybe<String>;
  phonefr_starts_with?: Maybe<String>;
  phonefr_not_starts_with?: Maybe<String>;
  phonefr_ends_with?: Maybe<String>;
  phonefr_not_ends_with?: Maybe<String>;
  phonenl?: Maybe<String>;
  phonenl_not?: Maybe<String>;
  phonenl_in?: Maybe<String[] | String>;
  phonenl_not_in?: Maybe<String[] | String>;
  phonenl_lt?: Maybe<String>;
  phonenl_lte?: Maybe<String>;
  phonenl_gt?: Maybe<String>;
  phonenl_gte?: Maybe<String>;
  phonenl_contains?: Maybe<String>;
  phonenl_not_contains?: Maybe<String>;
  phonenl_starts_with?: Maybe<String>;
  phonenl_not_starts_with?: Maybe<String>;
  phonenl_ends_with?: Maybe<String>;
  phonenl_not_ends_with?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryWhereInput>;
  pricingAVG?: Maybe<Float>;
  pricingAVG_not?: Maybe<Float>;
  pricingAVG_in?: Maybe<Float[] | Float>;
  pricingAVG_not_in?: Maybe<Float[] | Float>;
  pricingAVG_lt?: Maybe<Float>;
  pricingAVG_lte?: Maybe<Float>;
  pricingAVG_gt?: Maybe<Float>;
  pricingAVG_gte?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  ratingAVG_not?: Maybe<Float>;
  ratingAVG_in?: Maybe<Float[] | Float>;
  ratingAVG_not_in?: Maybe<Float[] | Float>;
  ratingAVG_lt?: Maybe<Float>;
  ratingAVG_lte?: Maybe<Float>;
  ratingAVG_gt?: Maybe<Float>;
  ratingAVG_gte?: Maybe<Float>;
  review_every?: Maybe<ReviewWhereInput>;
  review_some?: Maybe<ReviewWhereInput>;
  review_none?: Maybe<ReviewWhereInput>;
  shops?: Maybe<String>;
  shops_not?: Maybe<String>;
  shops_in?: Maybe<String[] | String>;
  shops_not_in?: Maybe<String[] | String>;
  shops_lt?: Maybe<String>;
  shops_lte?: Maybe<String>;
  shops_gt?: Maybe<String>;
  shops_gte?: Maybe<String>;
  shops_contains?: Maybe<String>;
  shops_not_contains?: Maybe<String>;
  shops_starts_with?: Maybe<String>;
  shops_not_starts_with?: Maybe<String>;
  shops_ends_with?: Maybe<String>;
  shops_not_ends_with?: Maybe<String>;
  site?: Maybe<String>;
  site_not?: Maybe<String>;
  site_in?: Maybe<String[] | String>;
  site_not_in?: Maybe<String[] | String>;
  site_lt?: Maybe<String>;
  site_lte?: Maybe<String>;
  site_gt?: Maybe<String>;
  site_gte?: Maybe<String>;
  site_contains?: Maybe<String>;
  site_not_contains?: Maybe<String>;
  site_starts_with?: Maybe<String>;
  site_not_starts_with?: Maybe<String>;
  site_ends_with?: Maybe<String>;
  site_not_ends_with?: Maybe<String>;
  siteen?: Maybe<String>;
  siteen_not?: Maybe<String>;
  siteen_in?: Maybe<String[] | String>;
  siteen_not_in?: Maybe<String[] | String>;
  siteen_lt?: Maybe<String>;
  siteen_lte?: Maybe<String>;
  siteen_gt?: Maybe<String>;
  siteen_gte?: Maybe<String>;
  siteen_contains?: Maybe<String>;
  siteen_not_contains?: Maybe<String>;
  siteen_starts_with?: Maybe<String>;
  siteen_not_starts_with?: Maybe<String>;
  siteen_ends_with?: Maybe<String>;
  siteen_not_ends_with?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitefr_not?: Maybe<String>;
  sitefr_in?: Maybe<String[] | String>;
  sitefr_not_in?: Maybe<String[] | String>;
  sitefr_lt?: Maybe<String>;
  sitefr_lte?: Maybe<String>;
  sitefr_gt?: Maybe<String>;
  sitefr_gte?: Maybe<String>;
  sitefr_contains?: Maybe<String>;
  sitefr_not_contains?: Maybe<String>;
  sitefr_starts_with?: Maybe<String>;
  sitefr_not_starts_with?: Maybe<String>;
  sitefr_ends_with?: Maybe<String>;
  sitefr_not_ends_with?: Maybe<String>;
  sitenl?: Maybe<String>;
  sitenl_not?: Maybe<String>;
  sitenl_in?: Maybe<String[] | String>;
  sitenl_not_in?: Maybe<String[] | String>;
  sitenl_lt?: Maybe<String>;
  sitenl_lte?: Maybe<String>;
  sitenl_gt?: Maybe<String>;
  sitenl_gte?: Maybe<String>;
  sitenl_contains?: Maybe<String>;
  sitenl_not_contains?: Maybe<String>;
  sitenl_starts_with?: Maybe<String>;
  sitenl_not_starts_with?: Maybe<String>;
  sitenl_ends_with?: Maybe<String>;
  sitenl_not_ends_with?: Maybe<String>;
  socialMedia_every?: Maybe<SocialMediaWhereInput>;
  socialMedia_some?: Maybe<SocialMediaWhereInput>;
  socialMedia_none?: Maybe<SocialMediaWhereInput>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  test?: Maybe<String>;
  test_not?: Maybe<String>;
  test_in?: Maybe<String[] | String>;
  test_not_in?: Maybe<String[] | String>;
  test_lt?: Maybe<String>;
  test_lte?: Maybe<String>;
  test_gt?: Maybe<String>;
  test_gte?: Maybe<String>;
  test_contains?: Maybe<String>;
  test_not_contains?: Maybe<String>;
  test_starts_with?: Maybe<String>;
  test_not_starts_with?: Maybe<String>;
  test_ends_with?: Maybe<String>;
  test_not_ends_with?: Maybe<String>;
  testJson?: Maybe<String>;
  testJson_not?: Maybe<String>;
  testJson_in?: Maybe<String[] | String>;
  testJson_not_in?: Maybe<String[] | String>;
  testJson_lt?: Maybe<String>;
  testJson_lte?: Maybe<String>;
  testJson_gt?: Maybe<String>;
  testJson_gte?: Maybe<String>;
  testJson_contains?: Maybe<String>;
  testJson_not_contains?: Maybe<String>;
  testJson_starts_with?: Maybe<String>;
  testJson_not_starts_with?: Maybe<String>;
  testJson_ends_with?: Maybe<String>;
  testJson_not_ends_with?: Maybe<String>;
  tva?: Maybe<String>;
  tva_not?: Maybe<String>;
  tva_in?: Maybe<String[] | String>;
  tva_not_in?: Maybe<String[] | String>;
  tva_lt?: Maybe<String>;
  tva_lte?: Maybe<String>;
  tva_gt?: Maybe<String>;
  tva_gte?: Maybe<String>;
  tva_contains?: Maybe<String>;
  tva_not_contains?: Maybe<String>;
  tva_starts_with?: Maybe<String>;
  tva_not_starts_with?: Maybe<String>;
  tva_ends_with?: Maybe<String>;
  tva_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user_every?: Maybe<UserWhereInput>;
  user_some?: Maybe<UserWhereInput>;
  user_none?: Maybe<UserWhereInput>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  widgetId_not?: Maybe<String>;
  widgetId_in?: Maybe<String[] | String>;
  widgetId_not_in?: Maybe<String[] | String>;
  widgetId_lt?: Maybe<String>;
  widgetId_lte?: Maybe<String>;
  widgetId_gt?: Maybe<String>;
  widgetId_gte?: Maybe<String>;
  widgetId_contains?: Maybe<String>;
  widgetId_not_contains?: Maybe<String>;
  widgetId_starts_with?: Maybe<String>;
  widgetId_not_starts_with?: Maybe<String>;
  widgetId_ends_with?: Maybe<String>;
  widgetId_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  OR?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  NOT?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
}

export interface PriceCategoryWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  provider_every?: Maybe<ProviderWhereInput>;
  provider_some?: Maybe<ProviderWhereInput>;
  provider_none?: Maybe<ProviderWhereInput>;
  AND?: Maybe<PriceCategoryWhereInput[] | PriceCategoryWhereInput>;
  OR?: Maybe<PriceCategoryWhereInput[] | PriceCategoryWhereInput>;
  NOT?: Maybe<PriceCategoryWhereInput[] | PriceCategoryWhereInput>;
}

export interface ReviewWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  author?: Maybe<CustomerWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentEn_not?: Maybe<String>;
  contentEn_in?: Maybe<String[] | String>;
  contentEn_not_in?: Maybe<String[] | String>;
  contentEn_lt?: Maybe<String>;
  contentEn_lte?: Maybe<String>;
  contentEn_gt?: Maybe<String>;
  contentEn_gte?: Maybe<String>;
  contentEn_contains?: Maybe<String>;
  contentEn_not_contains?: Maybe<String>;
  contentEn_starts_with?: Maybe<String>;
  contentEn_not_starts_with?: Maybe<String>;
  contentEn_ends_with?: Maybe<String>;
  contentEn_not_ends_with?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentFr_not?: Maybe<String>;
  contentFr_in?: Maybe<String[] | String>;
  contentFr_not_in?: Maybe<String[] | String>;
  contentFr_lt?: Maybe<String>;
  contentFr_lte?: Maybe<String>;
  contentFr_gt?: Maybe<String>;
  contentFr_gte?: Maybe<String>;
  contentFr_contains?: Maybe<String>;
  contentFr_not_contains?: Maybe<String>;
  contentFr_starts_with?: Maybe<String>;
  contentFr_not_starts_with?: Maybe<String>;
  contentFr_ends_with?: Maybe<String>;
  contentFr_not_ends_with?: Maybe<String>;
  contentNl?: Maybe<String>;
  contentNl_not?: Maybe<String>;
  contentNl_in?: Maybe<String[] | String>;
  contentNl_not_in?: Maybe<String[] | String>;
  contentNl_lt?: Maybe<String>;
  contentNl_lte?: Maybe<String>;
  contentNl_gt?: Maybe<String>;
  contentNl_gte?: Maybe<String>;
  contentNl_contains?: Maybe<String>;
  contentNl_not_contains?: Maybe<String>;
  contentNl_starts_with?: Maybe<String>;
  contentNl_not_starts_with?: Maybe<String>;
  contentNl_ends_with?: Maybe<String>;
  contentNl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  originalLang?: Maybe<String>;
  originalLang_not?: Maybe<String>;
  originalLang_in?: Maybe<String[] | String>;
  originalLang_not_in?: Maybe<String[] | String>;
  originalLang_lt?: Maybe<String>;
  originalLang_lte?: Maybe<String>;
  originalLang_gt?: Maybe<String>;
  originalLang_gte?: Maybe<String>;
  originalLang_contains?: Maybe<String>;
  originalLang_not_contains?: Maybe<String>;
  originalLang_starts_with?: Maybe<String>;
  originalLang_not_starts_with?: Maybe<String>;
  originalLang_ends_with?: Maybe<String>;
  originalLang_not_ends_with?: Maybe<String>;
  pricing?: Maybe<Int>;
  pricing_not?: Maybe<Int>;
  pricing_in?: Maybe<Int[] | Int>;
  pricing_not_in?: Maybe<Int[] | Int>;
  pricing_lt?: Maybe<Int>;
  pricing_lte?: Maybe<Int>;
  pricing_gt?: Maybe<Int>;
  pricing_gte?: Maybe<Int>;
  provider?: Maybe<ProviderWhereInput>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  reply?: Maybe<String>;
  reply_not?: Maybe<String>;
  reply_in?: Maybe<String[] | String>;
  reply_not_in?: Maybe<String[] | String>;
  reply_lt?: Maybe<String>;
  reply_lte?: Maybe<String>;
  reply_gt?: Maybe<String>;
  reply_gte?: Maybe<String>;
  reply_contains?: Maybe<String>;
  reply_not_contains?: Maybe<String>;
  reply_starts_with?: Maybe<String>;
  reply_not_starts_with?: Maybe<String>;
  reply_ends_with?: Maybe<String>;
  reply_not_ends_with?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyCreatedAt_not?: Maybe<DateTimeInput>;
  replyCreatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  replyCreatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  replyCreatedAt_lt?: Maybe<DateTimeInput>;
  replyCreatedAt_lte?: Maybe<DateTimeInput>;
  replyCreatedAt_gt?: Maybe<DateTimeInput>;
  replyCreatedAt_gte?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyEn_not?: Maybe<String>;
  replyEn_in?: Maybe<String[] | String>;
  replyEn_not_in?: Maybe<String[] | String>;
  replyEn_lt?: Maybe<String>;
  replyEn_lte?: Maybe<String>;
  replyEn_gt?: Maybe<String>;
  replyEn_gte?: Maybe<String>;
  replyEn_contains?: Maybe<String>;
  replyEn_not_contains?: Maybe<String>;
  replyEn_starts_with?: Maybe<String>;
  replyEn_not_starts_with?: Maybe<String>;
  replyEn_ends_with?: Maybe<String>;
  replyEn_not_ends_with?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyFr_not?: Maybe<String>;
  replyFr_in?: Maybe<String[] | String>;
  replyFr_not_in?: Maybe<String[] | String>;
  replyFr_lt?: Maybe<String>;
  replyFr_lte?: Maybe<String>;
  replyFr_gt?: Maybe<String>;
  replyFr_gte?: Maybe<String>;
  replyFr_contains?: Maybe<String>;
  replyFr_not_contains?: Maybe<String>;
  replyFr_starts_with?: Maybe<String>;
  replyFr_not_starts_with?: Maybe<String>;
  replyFr_ends_with?: Maybe<String>;
  replyFr_not_ends_with?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyNl_not?: Maybe<String>;
  replyNl_in?: Maybe<String[] | String>;
  replyNl_not_in?: Maybe<String[] | String>;
  replyNl_lt?: Maybe<String>;
  replyNl_lte?: Maybe<String>;
  replyNl_gt?: Maybe<String>;
  replyNl_gte?: Maybe<String>;
  replyNl_contains?: Maybe<String>;
  replyNl_not_contains?: Maybe<String>;
  replyNl_starts_with?: Maybe<String>;
  replyNl_not_starts_with?: Maybe<String>;
  replyNl_ends_with?: Maybe<String>;
  replyNl_not_ends_with?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  replyOriginal_not?: Maybe<String>;
  replyOriginal_in?: Maybe<String[] | String>;
  replyOriginal_not_in?: Maybe<String[] | String>;
  replyOriginal_lt?: Maybe<String>;
  replyOriginal_lte?: Maybe<String>;
  replyOriginal_gt?: Maybe<String>;
  replyOriginal_gte?: Maybe<String>;
  replyOriginal_contains?: Maybe<String>;
  replyOriginal_not_contains?: Maybe<String>;
  replyOriginal_starts_with?: Maybe<String>;
  replyOriginal_not_starts_with?: Maybe<String>;
  replyOriginal_ends_with?: Maybe<String>;
  replyOriginal_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleEn_not?: Maybe<String>;
  titleEn_in?: Maybe<String[] | String>;
  titleEn_not_in?: Maybe<String[] | String>;
  titleEn_lt?: Maybe<String>;
  titleEn_lte?: Maybe<String>;
  titleEn_gt?: Maybe<String>;
  titleEn_gte?: Maybe<String>;
  titleEn_contains?: Maybe<String>;
  titleEn_not_contains?: Maybe<String>;
  titleEn_starts_with?: Maybe<String>;
  titleEn_not_starts_with?: Maybe<String>;
  titleEn_ends_with?: Maybe<String>;
  titleEn_not_ends_with?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleFr_not?: Maybe<String>;
  titleFr_in?: Maybe<String[] | String>;
  titleFr_not_in?: Maybe<String[] | String>;
  titleFr_lt?: Maybe<String>;
  titleFr_lte?: Maybe<String>;
  titleFr_gt?: Maybe<String>;
  titleFr_gte?: Maybe<String>;
  titleFr_contains?: Maybe<String>;
  titleFr_not_contains?: Maybe<String>;
  titleFr_starts_with?: Maybe<String>;
  titleFr_not_starts_with?: Maybe<String>;
  titleFr_ends_with?: Maybe<String>;
  titleFr_not_ends_with?: Maybe<String>;
  titleNl?: Maybe<String>;
  titleNl_not?: Maybe<String>;
  titleNl_in?: Maybe<String[] | String>;
  titleNl_not_in?: Maybe<String[] | String>;
  titleNl_lt?: Maybe<String>;
  titleNl_lte?: Maybe<String>;
  titleNl_gt?: Maybe<String>;
  titleNl_gte?: Maybe<String>;
  titleNl_contains?: Maybe<String>;
  titleNl_not_contains?: Maybe<String>;
  titleNl_starts_with?: Maybe<String>;
  titleNl_not_starts_with?: Maybe<String>;
  titleNl_ends_with?: Maybe<String>;
  titleNl_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  upvote?: Maybe<Int>;
  upvote_not?: Maybe<Int>;
  upvote_in?: Maybe<Int[] | Int>;
  upvote_not_in?: Maybe<Int[] | Int>;
  upvote_lt?: Maybe<Int>;
  upvote_lte?: Maybe<Int>;
  upvote_gt?: Maybe<Int>;
  upvote_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  companyAddress?: Maybe<String>;
  companyAddress_not?: Maybe<String>;
  companyAddress_in?: Maybe<String[] | String>;
  companyAddress_not_in?: Maybe<String[] | String>;
  companyAddress_lt?: Maybe<String>;
  companyAddress_lte?: Maybe<String>;
  companyAddress_gt?: Maybe<String>;
  companyAddress_gte?: Maybe<String>;
  companyAddress_contains?: Maybe<String>;
  companyAddress_not_contains?: Maybe<String>;
  companyAddress_starts_with?: Maybe<String>;
  companyAddress_not_starts_with?: Maybe<String>;
  companyAddress_ends_with?: Maybe<String>;
  companyAddress_not_ends_with?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCity_not?: Maybe<String>;
  companyCity_in?: Maybe<String[] | String>;
  companyCity_not_in?: Maybe<String[] | String>;
  companyCity_lt?: Maybe<String>;
  companyCity_lte?: Maybe<String>;
  companyCity_gt?: Maybe<String>;
  companyCity_gte?: Maybe<String>;
  companyCity_contains?: Maybe<String>;
  companyCity_not_contains?: Maybe<String>;
  companyCity_starts_with?: Maybe<String>;
  companyCity_not_starts_with?: Maybe<String>;
  companyCity_ends_with?: Maybe<String>;
  companyCity_not_ends_with?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyCountry_not?: Maybe<String>;
  companyCountry_in?: Maybe<String[] | String>;
  companyCountry_not_in?: Maybe<String[] | String>;
  companyCountry_lt?: Maybe<String>;
  companyCountry_lte?: Maybe<String>;
  companyCountry_gt?: Maybe<String>;
  companyCountry_gte?: Maybe<String>;
  companyCountry_contains?: Maybe<String>;
  companyCountry_not_contains?: Maybe<String>;
  companyCountry_starts_with?: Maybe<String>;
  companyCountry_not_starts_with?: Maybe<String>;
  companyCountry_ends_with?: Maybe<String>;
  companyCountry_not_ends_with?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyEmployee_not?: Maybe<Int>;
  companyEmployee_in?: Maybe<Int[] | Int>;
  companyEmployee_not_in?: Maybe<Int[] | Int>;
  companyEmployee_lt?: Maybe<Int>;
  companyEmployee_lte?: Maybe<Int>;
  companyEmployee_gt?: Maybe<Int>;
  companyEmployee_gte?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companyPhone_not?: Maybe<String>;
  companyPhone_in?: Maybe<String[] | String>;
  companyPhone_not_in?: Maybe<String[] | String>;
  companyPhone_lt?: Maybe<String>;
  companyPhone_lte?: Maybe<String>;
  companyPhone_gt?: Maybe<String>;
  companyPhone_gte?: Maybe<String>;
  companyPhone_contains?: Maybe<String>;
  companyPhone_not_contains?: Maybe<String>;
  companyPhone_starts_with?: Maybe<String>;
  companyPhone_not_starts_with?: Maybe<String>;
  companyPhone_ends_with?: Maybe<String>;
  companyPhone_not_ends_with?: Maybe<String>;
  companySize?: Maybe<String>;
  companySize_not?: Maybe<String>;
  companySize_in?: Maybe<String[] | String>;
  companySize_not_in?: Maybe<String[] | String>;
  companySize_lt?: Maybe<String>;
  companySize_lte?: Maybe<String>;
  companySize_gt?: Maybe<String>;
  companySize_gte?: Maybe<String>;
  companySize_contains?: Maybe<String>;
  companySize_not_contains?: Maybe<String>;
  companySize_starts_with?: Maybe<String>;
  companySize_not_starts_with?: Maybe<String>;
  companySize_ends_with?: Maybe<String>;
  companySize_not_ends_with?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyTva_not?: Maybe<String>;
  companyTva_in?: Maybe<String[] | String>;
  companyTva_not_in?: Maybe<String[] | String>;
  companyTva_lt?: Maybe<String>;
  companyTva_lte?: Maybe<String>;
  companyTva_gt?: Maybe<String>;
  companyTva_gte?: Maybe<String>;
  companyTva_contains?: Maybe<String>;
  companyTva_not_contains?: Maybe<String>;
  companyTva_starts_with?: Maybe<String>;
  companyTva_not_starts_with?: Maybe<String>;
  companyTva_ends_with?: Maybe<String>;
  companyTva_not_ends_with?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyWebsite_not?: Maybe<String>;
  companyWebsite_in?: Maybe<String[] | String>;
  companyWebsite_not_in?: Maybe<String[] | String>;
  companyWebsite_lt?: Maybe<String>;
  companyWebsite_lte?: Maybe<String>;
  companyWebsite_gt?: Maybe<String>;
  companyWebsite_gte?: Maybe<String>;
  companyWebsite_contains?: Maybe<String>;
  companyWebsite_not_contains?: Maybe<String>;
  companyWebsite_starts_with?: Maybe<String>;
  companyWebsite_not_starts_with?: Maybe<String>;
  companyWebsite_ends_with?: Maybe<String>;
  companyWebsite_not_ends_with?: Maybe<String>;
  companyZip?: Maybe<String>;
  companyZip_not?: Maybe<String>;
  companyZip_in?: Maybe<String[] | String>;
  companyZip_not_in?: Maybe<String[] | String>;
  companyZip_lt?: Maybe<String>;
  companyZip_lte?: Maybe<String>;
  companyZip_gt?: Maybe<String>;
  companyZip_gte?: Maybe<String>;
  companyZip_contains?: Maybe<String>;
  companyZip_not_contains?: Maybe<String>;
  companyZip_starts_with?: Maybe<String>;
  companyZip_not_starts_with?: Maybe<String>;
  companyZip_ends_with?: Maybe<String>;
  companyZip_not_ends_with?: Maybe<String>;
  contract_every?: Maybe<ContractWhereInput>;
  contract_some?: Maybe<ContractWhereInput>;
  contract_none?: Maybe<ContractWhereInput>;
  countryCode?: Maybe<String>;
  countryCode_not?: Maybe<String>;
  countryCode_in?: Maybe<String[] | String>;
  countryCode_not_in?: Maybe<String[] | String>;
  countryCode_lt?: Maybe<String>;
  countryCode_lte?: Maybe<String>;
  countryCode_gt?: Maybe<String>;
  countryCode_gte?: Maybe<String>;
  countryCode_contains?: Maybe<String>;
  countryCode_not_contains?: Maybe<String>;
  countryCode_starts_with?: Maybe<String>;
  countryCode_not_starts_with?: Maybe<String>;
  countryCode_ends_with?: Maybe<String>;
  countryCode_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  emailPro?: Maybe<String>;
  emailPro_not?: Maybe<String>;
  emailPro_in?: Maybe<String[] | String>;
  emailPro_not_in?: Maybe<String[] | String>;
  emailPro_lt?: Maybe<String>;
  emailPro_lte?: Maybe<String>;
  emailPro_gt?: Maybe<String>;
  emailPro_gte?: Maybe<String>;
  emailPro_contains?: Maybe<String>;
  emailPro_not_contains?: Maybe<String>;
  emailPro_starts_with?: Maybe<String>;
  emailPro_not_starts_with?: Maybe<String>;
  emailPro_ends_with?: Maybe<String>;
  emailPro_not_ends_with?: Maybe<String>;
  familyName?: Maybe<String>;
  familyName_not?: Maybe<String>;
  familyName_in?: Maybe<String[] | String>;
  familyName_not_in?: Maybe<String[] | String>;
  familyName_lt?: Maybe<String>;
  familyName_lte?: Maybe<String>;
  familyName_gt?: Maybe<String>;
  familyName_gte?: Maybe<String>;
  familyName_contains?: Maybe<String>;
  familyName_not_contains?: Maybe<String>;
  familyName_starts_with?: Maybe<String>;
  familyName_not_starts_with?: Maybe<String>;
  familyName_ends_with?: Maybe<String>;
  familyName_not_ends_with?: Maybe<String>;
  favProvs?: Maybe<String>;
  favProvs_not?: Maybe<String>;
  favProvs_in?: Maybe<String[] | String>;
  favProvs_not_in?: Maybe<String[] | String>;
  favProvs_lt?: Maybe<String>;
  favProvs_lte?: Maybe<String>;
  favProvs_gt?: Maybe<String>;
  favProvs_gte?: Maybe<String>;
  favProvs_contains?: Maybe<String>;
  favProvs_not_contains?: Maybe<String>;
  favProvs_starts_with?: Maybe<String>;
  favProvs_not_starts_with?: Maybe<String>;
  favProvs_ends_with?: Maybe<String>;
  favProvs_not_ends_with?: Maybe<String>;
  givenName?: Maybe<String>;
  givenName_not?: Maybe<String>;
  givenName_in?: Maybe<String[] | String>;
  givenName_not_in?: Maybe<String[] | String>;
  givenName_lt?: Maybe<String>;
  givenName_lte?: Maybe<String>;
  givenName_gt?: Maybe<String>;
  givenName_gte?: Maybe<String>;
  givenName_contains?: Maybe<String>;
  givenName_not_contains?: Maybe<String>;
  givenName_starts_with?: Maybe<String>;
  givenName_not_starts_with?: Maybe<String>;
  givenName_ends_with?: Maybe<String>;
  givenName_not_ends_with?: Maybe<String>;
  gsm?: Maybe<String>;
  gsm_not?: Maybe<String>;
  gsm_in?: Maybe<String[] | String>;
  gsm_not_in?: Maybe<String[] | String>;
  gsm_lt?: Maybe<String>;
  gsm_lte?: Maybe<String>;
  gsm_gt?: Maybe<String>;
  gsm_gte?: Maybe<String>;
  gsm_contains?: Maybe<String>;
  gsm_not_contains?: Maybe<String>;
  gsm_starts_with?: Maybe<String>;
  gsm_not_starts_with?: Maybe<String>;
  gsm_ends_with?: Maybe<String>;
  gsm_not_ends_with?: Maybe<String>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  lang?: Maybe<String>;
  lang_not?: Maybe<String>;
  lang_in?: Maybe<String[] | String>;
  lang_not_in?: Maybe<String[] | String>;
  lang_lt?: Maybe<String>;
  lang_lte?: Maybe<String>;
  lang_gt?: Maybe<String>;
  lang_gte?: Maybe<String>;
  lang_contains?: Maybe<String>;
  lang_not_contains?: Maybe<String>;
  lang_starts_with?: Maybe<String>;
  lang_not_starts_with?: Maybe<String>;
  lang_ends_with?: Maybe<String>;
  lang_not_ends_with?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  lastlogin_not?: Maybe<DateTimeInput>;
  lastlogin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_lt?: Maybe<DateTimeInput>;
  lastlogin_lte?: Maybe<DateTimeInput>;
  lastlogin_gt?: Maybe<DateTimeInput>;
  lastlogin_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  numberlogin_not?: Maybe<Int>;
  numberlogin_in?: Maybe<Int[] | Int>;
  numberlogin_not_in?: Maybe<Int[] | Int>;
  numberlogin_lt?: Maybe<Int>;
  numberlogin_lte?: Maybe<Int>;
  numberlogin_gt?: Maybe<Int>;
  numberlogin_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  review_every?: Maybe<ReviewWhereInput>;
  review_some?: Maybe<ReviewWhereInput>;
  review_none?: Maybe<ReviewWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  tuto_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface SocialMediaWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  facebook?: Maybe<String>;
  facebook_not?: Maybe<String>;
  facebook_in?: Maybe<String[] | String>;
  facebook_not_in?: Maybe<String[] | String>;
  facebook_lt?: Maybe<String>;
  facebook_lte?: Maybe<String>;
  facebook_gt?: Maybe<String>;
  facebook_gte?: Maybe<String>;
  facebook_contains?: Maybe<String>;
  facebook_not_contains?: Maybe<String>;
  facebook_starts_with?: Maybe<String>;
  facebook_not_starts_with?: Maybe<String>;
  facebook_ends_with?: Maybe<String>;
  facebook_not_ends_with?: Maybe<String>;
  linkedin?: Maybe<String>;
  linkedin_not?: Maybe<String>;
  linkedin_in?: Maybe<String[] | String>;
  linkedin_not_in?: Maybe<String[] | String>;
  linkedin_lt?: Maybe<String>;
  linkedin_lte?: Maybe<String>;
  linkedin_gt?: Maybe<String>;
  linkedin_gte?: Maybe<String>;
  linkedin_contains?: Maybe<String>;
  linkedin_not_contains?: Maybe<String>;
  linkedin_starts_with?: Maybe<String>;
  linkedin_not_starts_with?: Maybe<String>;
  linkedin_ends_with?: Maybe<String>;
  linkedin_not_ends_with?: Maybe<String>;
  provider?: Maybe<ProviderWhereInput>;
  twitter?: Maybe<String>;
  twitter_not?: Maybe<String>;
  twitter_in?: Maybe<String[] | String>;
  twitter_not_in?: Maybe<String[] | String>;
  twitter_lt?: Maybe<String>;
  twitter_lte?: Maybe<String>;
  twitter_gt?: Maybe<String>;
  twitter_gte?: Maybe<String>;
  twitter_contains?: Maybe<String>;
  twitter_not_contains?: Maybe<String>;
  twitter_starts_with?: Maybe<String>;
  twitter_not_starts_with?: Maybe<String>;
  twitter_ends_with?: Maybe<String>;
  twitter_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
  OR?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
  NOT?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  allowedToConnect?: Maybe<Boolean>;
  allowedToConnect_not?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  changedPwd_not?: Maybe<String>;
  changedPwd_in?: Maybe<String[] | String>;
  changedPwd_not_in?: Maybe<String[] | String>;
  changedPwd_lt?: Maybe<String>;
  changedPwd_lte?: Maybe<String>;
  changedPwd_gt?: Maybe<String>;
  changedPwd_gte?: Maybe<String>;
  changedPwd_contains?: Maybe<String>;
  changedPwd_not_contains?: Maybe<String>;
  changedPwd_starts_with?: Maybe<String>;
  changedPwd_not_starts_with?: Maybe<String>;
  changedPwd_ends_with?: Maybe<String>;
  changedPwd_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  givenName?: Maybe<String>;
  givenName_not?: Maybe<String>;
  givenName_in?: Maybe<String[] | String>;
  givenName_not_in?: Maybe<String[] | String>;
  givenName_lt?: Maybe<String>;
  givenName_lte?: Maybe<String>;
  givenName_gt?: Maybe<String>;
  givenName_gte?: Maybe<String>;
  givenName_contains?: Maybe<String>;
  givenName_not_contains?: Maybe<String>;
  givenName_starts_with?: Maybe<String>;
  givenName_not_starts_with?: Maybe<String>;
  givenName_ends_with?: Maybe<String>;
  givenName_not_ends_with?: Maybe<String>;
  lang?: Maybe<String>;
  lang_not?: Maybe<String>;
  lang_in?: Maybe<String[] | String>;
  lang_not_in?: Maybe<String[] | String>;
  lang_lt?: Maybe<String>;
  lang_lte?: Maybe<String>;
  lang_gt?: Maybe<String>;
  lang_gte?: Maybe<String>;
  lang_contains?: Maybe<String>;
  lang_not_contains?: Maybe<String>;
  lang_starts_with?: Maybe<String>;
  lang_not_starts_with?: Maybe<String>;
  lang_ends_with?: Maybe<String>;
  lang_not_ends_with?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  lastlogin_not?: Maybe<DateTimeInput>;
  lastlogin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_lt?: Maybe<DateTimeInput>;
  lastlogin_lte?: Maybe<DateTimeInput>;
  lastlogin_gt?: Maybe<DateTimeInput>;
  lastlogin_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  numberlogin_not?: Maybe<Int>;
  numberlogin_in?: Maybe<Int[] | Int>;
  numberlogin_not_in?: Maybe<Int[] | Int>;
  numberlogin_lt?: Maybe<Int>;
  numberlogin_lte?: Maybe<Int>;
  numberlogin_gt?: Maybe<Int>;
  numberlogin_gte?: Maybe<Int>;
  provider_every?: Maybe<ProviderWhereInput>;
  provider_some?: Maybe<ProviderWhereInput>;
  provider_none?: Maybe<ProviderWhereInput>;
  tempPwd?: Maybe<String>;
  tempPwd_not?: Maybe<String>;
  tempPwd_in?: Maybe<String[] | String>;
  tempPwd_not_in?: Maybe<String[] | String>;
  tempPwd_lt?: Maybe<String>;
  tempPwd_lte?: Maybe<String>;
  tempPwd_gt?: Maybe<String>;
  tempPwd_gte?: Maybe<String>;
  tempPwd_contains?: Maybe<String>;
  tempPwd_not_contains?: Maybe<String>;
  tempPwd_starts_with?: Maybe<String>;
  tempPwd_not_starts_with?: Maybe<String>;
  tempPwd_ends_with?: Maybe<String>;
  tempPwd_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SubCategoryWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  category_every?: Maybe<CategoryWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  category_none?: Maybe<CategoryWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  AND?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
  OR?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
  NOT?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
}

export type ContractWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  contractID?: Maybe<String>;
}>;

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  userId?: Maybe<String>;
}>;

export type NewsletterWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  email?: Maybe<String>;
}>;

export interface NewsletterWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<NewsletterWhereInput[] | NewsletterWhereInput>;
  OR?: Maybe<NewsletterWhereInput[] | NewsletterWhereInput>;
  NOT?: Maybe<NewsletterWhereInput[] | NewsletterWhereInput>;
}

export type PriceCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ProviderWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  name?: Maybe<String>;
}>;

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type SocialMediaWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type SubCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface CategoryCreateInput {
  contract?: Maybe<ContractCreateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name: String;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderCreateManyWithoutCategoryInput>;
  subcategory?: Maybe<SubCategoryCreateOneWithoutCategoryInput>;
}

export interface ContractCreateManyWithoutCategoryInput {
  create?: Maybe<
    ContractCreateWithoutCategoryInput[] | ContractCreateWithoutCategoryInput
  >;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutCategoryInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID: String;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerCreateOneWithoutContractInput>;
  provider?: Maybe<ProviderCreateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface CustomerCreateOneWithoutContractInput {
  create?: Maybe<CustomerCreateWithoutContractInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerCreateWithoutContractInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  countryCode?: Maybe<String>;
  email: String;
  emailPro?: Maybe<String>;
  familyName: String;
  favProvs?: Maybe<String>;
  givenName: String;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name: String;
  numberlogin: Int;
  phone?: Maybe<String>;
  picture: String;
  review?: Maybe<ReviewCreateManyWithoutAuthorInput>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId: String;
}

export interface ReviewCreateManyWithoutAuthorInput {
  create?: Maybe<
    ReviewCreateWithoutAuthorInput[] | ReviewCreateWithoutAuthorInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutAuthorInput {
  content: String;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  provider?: Maybe<ProviderCreateOneWithoutReviewInput>;
  rating: Int;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title: String;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ProviderCreateOneWithoutReviewInput {
  create?: Maybe<ProviderCreateWithoutReviewInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutReviewInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface CategoryCreateManyWithoutProviderInput {
  create?: Maybe<
    CategoryCreateWithoutProviderInput[] | CategoryCreateWithoutProviderInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutProviderInput {
  contract?: Maybe<ContractCreateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name: String;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  subcategory?: Maybe<SubCategoryCreateOneWithoutCategoryInput>;
}

export interface SubCategoryCreateOneWithoutCategoryInput {
  create?: Maybe<SubCategoryCreateWithoutCategoryInput>;
  connect?: Maybe<SubCategoryWhereUniqueInput>;
}

export interface SubCategoryCreateWithoutCategoryInput {
  name: String;
  photo?: Maybe<String>;
}

export interface ContractCreateManyWithoutProviderInput {
  create?: Maybe<
    ContractCreateWithoutProviderInput[] | ContractCreateWithoutProviderInput
  >;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutProviderInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryCreateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID: String;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerCreateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface CategoryCreateOneWithoutContractInput {
  create?: Maybe<CategoryCreateWithoutContractInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutContractInput {
  description?: Maybe<String>;
  name: String;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderCreateManyWithoutCategoryInput>;
  subcategory?: Maybe<SubCategoryCreateOneWithoutCategoryInput>;
}

export interface ProviderCreateManyWithoutCategoryInput {
  create?: Maybe<
    ProviderCreateWithoutCategoryInput[] | ProviderCreateWithoutCategoryInput
  >;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutCategoryInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface PriceCategoryCreateOneWithoutProviderInput {
  create?: Maybe<PriceCategoryCreateWithoutProviderInput>;
  connect?: Maybe<PriceCategoryWhereUniqueInput>;
}

export interface PriceCategoryCreateWithoutProviderInput {
  name: String;
}

export interface ReviewCreateManyWithoutProviderInput {
  create?: Maybe<
    ReviewCreateWithoutProviderInput[] | ReviewCreateWithoutProviderInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutProviderInput {
  author?: Maybe<CustomerCreateOneWithoutReviewInput>;
  content: String;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  rating: Int;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title: String;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface CustomerCreateOneWithoutReviewInput {
  create?: Maybe<CustomerCreateWithoutReviewInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerCreateWithoutReviewInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutCustomerInput>;
  countryCode?: Maybe<String>;
  email: String;
  emailPro?: Maybe<String>;
  familyName: String;
  favProvs?: Maybe<String>;
  givenName: String;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name: String;
  numberlogin: Int;
  phone?: Maybe<String>;
  picture: String;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId: String;
}

export interface ContractCreateManyWithoutCustomerInput {
  create?: Maybe<
    ContractCreateWithoutCustomerInput[] | ContractCreateWithoutCustomerInput
  >;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutCustomerInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryCreateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID: String;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  provider?: Maybe<ProviderCreateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface ProviderCreateOneWithoutContractInput {
  create?: Maybe<ProviderCreateWithoutContractInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutContractInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface SocialMediaCreateManyWithoutProviderInput {
  create?: Maybe<
    | SocialMediaCreateWithoutProviderInput[]
    | SocialMediaCreateWithoutProviderInput
  >;
  connect?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
}

export interface SocialMediaCreateWithoutProviderInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface UserCreateManyWithoutProviderInput {
  create?: Maybe<
    UserCreateWithoutProviderInput[] | UserCreateWithoutProviderInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutProviderInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email: String;
  givenName: String;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name: String;
  numberlogin: Int;
  tempPwd?: Maybe<String>;
}

export interface CategoryUpdateInput {
  contract?: Maybe<ContractUpdateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderUpdateManyWithoutCategoryInput>;
  subcategory?: Maybe<SubCategoryUpdateOneWithoutCategoryInput>;
}

export interface ContractUpdateManyWithoutCategoryInput {
  create?: Maybe<
    ContractCreateWithoutCategoryInput[] | ContractCreateWithoutCategoryInput
  >;
  delete?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  set?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  disconnect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  update?: Maybe<
    | ContractUpdateWithWhereUniqueWithoutCategoryInput[]
    | ContractUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | ContractUpsertWithWhereUniqueWithoutCategoryInput[]
    | ContractUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  updateMany?: Maybe<
    | ContractUpdateManyWithWhereNestedInput[]
    | ContractUpdateManyWithWhereNestedInput
  >;
}

export interface ContractUpdateWithWhereUniqueWithoutCategoryInput {
  where: ContractWhereUniqueInput;
  data: ContractUpdateWithoutCategoryDataInput;
}

export interface ContractUpdateWithoutCategoryDataInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerUpdateOneWithoutContractInput>;
  provider?: Maybe<ProviderUpdateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface CustomerUpdateOneWithoutContractInput {
  create?: Maybe<CustomerCreateWithoutContractInput>;
  update?: Maybe<CustomerUpdateWithoutContractDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutContractInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateWithoutContractDataInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  countryCode?: Maybe<String>;
  email?: Maybe<String>;
  emailPro?: Maybe<String>;
  familyName?: Maybe<String>;
  favProvs?: Maybe<String>;
  givenName?: Maybe<String>;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  phone?: Maybe<String>;
  picture?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutAuthorInput>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface ReviewUpdateManyWithoutAuthorInput {
  create?: Maybe<
    ReviewCreateWithoutAuthorInput[] | ReviewCreateWithoutAuthorInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutAuthorInput[]
    | ReviewUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutAuthorInput[]
    | ReviewUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutAuthorDataInput;
}

export interface ReviewUpdateWithoutAuthorDataInput {
  content?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  provider?: Maybe<ProviderUpdateOneWithoutReviewInput>;
  rating?: Maybe<Int>;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ProviderUpdateOneWithoutReviewInput {
  create?: Maybe<ProviderCreateWithoutReviewInput>;
  update?: Maybe<ProviderUpdateWithoutReviewDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutReviewInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutReviewDataInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface CategoryUpdateManyWithoutProviderInput {
  create?: Maybe<
    CategoryCreateWithoutProviderInput[] | CategoryCreateWithoutProviderInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutProviderInput[]
    | CategoryUpdateWithWhereUniqueWithoutProviderInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutProviderInput[]
    | CategoryUpsertWithWhereUniqueWithoutProviderInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutProviderInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutProviderDataInput;
}

export interface CategoryUpdateWithoutProviderDataInput {
  contract?: Maybe<ContractUpdateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  subcategory?: Maybe<SubCategoryUpdateOneWithoutCategoryInput>;
}

export interface SubCategoryUpdateOneWithoutCategoryInput {
  create?: Maybe<SubCategoryCreateWithoutCategoryInput>;
  update?: Maybe<SubCategoryUpdateWithoutCategoryDataInput>;
  upsert?: Maybe<SubCategoryUpsertWithoutCategoryInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubCategoryWhereUniqueInput>;
}

export interface SubCategoryUpdateWithoutCategoryDataInput {
  name?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface SubCategoryUpsertWithoutCategoryInput {
  update: SubCategoryUpdateWithoutCategoryDataInput;
  create: SubCategoryCreateWithoutCategoryInput;
}

export interface CategoryUpsertWithWhereUniqueWithoutProviderInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutProviderDataInput;
  create: CategoryCreateWithoutProviderInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameFr_not?: Maybe<String>;
  nameFr_in?: Maybe<String[] | String>;
  nameFr_not_in?: Maybe<String[] | String>;
  nameFr_lt?: Maybe<String>;
  nameFr_lte?: Maybe<String>;
  nameFr_gt?: Maybe<String>;
  nameFr_gte?: Maybe<String>;
  nameFr_contains?: Maybe<String>;
  nameFr_not_contains?: Maybe<String>;
  nameFr_starts_with?: Maybe<String>;
  nameFr_not_starts_with?: Maybe<String>;
  nameFr_ends_with?: Maybe<String>;
  nameFr_not_ends_with?: Maybe<String>;
  nameNl?: Maybe<String>;
  nameNl_not?: Maybe<String>;
  nameNl_in?: Maybe<String[] | String>;
  nameNl_not_in?: Maybe<String[] | String>;
  nameNl_lt?: Maybe<String>;
  nameNl_lte?: Maybe<String>;
  nameNl_gt?: Maybe<String>;
  nameNl_gte?: Maybe<String>;
  nameNl_contains?: Maybe<String>;
  nameNl_not_contains?: Maybe<String>;
  nameNl_starts_with?: Maybe<String>;
  nameNl_not_starts_with?: Maybe<String>;
  nameNl_ends_with?: Maybe<String>;
  nameNl_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface ContractUpdateManyWithoutProviderInput {
  create?: Maybe<
    ContractCreateWithoutProviderInput[] | ContractCreateWithoutProviderInput
  >;
  delete?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  set?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  disconnect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  update?: Maybe<
    | ContractUpdateWithWhereUniqueWithoutProviderInput[]
    | ContractUpdateWithWhereUniqueWithoutProviderInput
  >;
  upsert?: Maybe<
    | ContractUpsertWithWhereUniqueWithoutProviderInput[]
    | ContractUpsertWithWhereUniqueWithoutProviderInput
  >;
  deleteMany?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  updateMany?: Maybe<
    | ContractUpdateManyWithWhereNestedInput[]
    | ContractUpdateManyWithWhereNestedInput
  >;
}

export interface ContractUpdateWithWhereUniqueWithoutProviderInput {
  where: ContractWhereUniqueInput;
  data: ContractUpdateWithoutProviderDataInput;
}

export interface ContractUpdateWithoutProviderDataInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerUpdateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface CategoryUpdateOneWithoutContractInput {
  create?: Maybe<CategoryCreateWithoutContractInput>;
  update?: Maybe<CategoryUpdateWithoutContractDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutContractInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryUpdateWithoutContractDataInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderUpdateManyWithoutCategoryInput>;
  subcategory?: Maybe<SubCategoryUpdateOneWithoutCategoryInput>;
}

export interface ProviderUpdateManyWithoutCategoryInput {
  create?: Maybe<
    ProviderCreateWithoutCategoryInput[] | ProviderCreateWithoutCategoryInput
  >;
  delete?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  set?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  disconnect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  update?: Maybe<
    | ProviderUpdateWithWhereUniqueWithoutCategoryInput[]
    | ProviderUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | ProviderUpsertWithWhereUniqueWithoutCategoryInput[]
    | ProviderUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  updateMany?: Maybe<
    | ProviderUpdateManyWithWhereNestedInput[]
    | ProviderUpdateManyWithWhereNestedInput
  >;
}

export interface ProviderUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProviderWhereUniqueInput;
  data: ProviderUpdateWithoutCategoryDataInput;
}

export interface ProviderUpdateWithoutCategoryDataInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface PriceCategoryUpdateOneWithoutProviderInput {
  create?: Maybe<PriceCategoryCreateWithoutProviderInput>;
  update?: Maybe<PriceCategoryUpdateWithoutProviderDataInput>;
  upsert?: Maybe<PriceCategoryUpsertWithoutProviderInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PriceCategoryWhereUniqueInput>;
}

export interface PriceCategoryUpdateWithoutProviderDataInput {
  name?: Maybe<String>;
}

export interface PriceCategoryUpsertWithoutProviderInput {
  update: PriceCategoryUpdateWithoutProviderDataInput;
  create: PriceCategoryCreateWithoutProviderInput;
}

export interface ReviewUpdateManyWithoutProviderInput {
  create?: Maybe<
    ReviewCreateWithoutProviderInput[] | ReviewCreateWithoutProviderInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutProviderInput[]
    | ReviewUpdateWithWhereUniqueWithoutProviderInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutProviderInput[]
    | ReviewUpsertWithWhereUniqueWithoutProviderInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutProviderInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutProviderDataInput;
}

export interface ReviewUpdateWithoutProviderDataInput {
  author?: Maybe<CustomerUpdateOneWithoutReviewInput>;
  content?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  rating?: Maybe<Int>;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface CustomerUpdateOneWithoutReviewInput {
  create?: Maybe<CustomerCreateWithoutReviewInput>;
  update?: Maybe<CustomerUpdateWithoutReviewDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutReviewInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateWithoutReviewDataInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutCustomerInput>;
  countryCode?: Maybe<String>;
  email?: Maybe<String>;
  emailPro?: Maybe<String>;
  familyName?: Maybe<String>;
  favProvs?: Maybe<String>;
  givenName?: Maybe<String>;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  phone?: Maybe<String>;
  picture?: Maybe<String>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface ContractUpdateManyWithoutCustomerInput {
  create?: Maybe<
    ContractCreateWithoutCustomerInput[] | ContractCreateWithoutCustomerInput
  >;
  delete?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  set?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  disconnect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  update?: Maybe<
    | ContractUpdateWithWhereUniqueWithoutCustomerInput[]
    | ContractUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | ContractUpsertWithWhereUniqueWithoutCustomerInput[]
    | ContractUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  updateMany?: Maybe<
    | ContractUpdateManyWithWhereNestedInput[]
    | ContractUpdateManyWithWhereNestedInput
  >;
}

export interface ContractUpdateWithWhereUniqueWithoutCustomerInput {
  where: ContractWhereUniqueInput;
  data: ContractUpdateWithoutCustomerDataInput;
}

export interface ContractUpdateWithoutCustomerDataInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  provider?: Maybe<ProviderUpdateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface ProviderUpdateOneWithoutContractInput {
  create?: Maybe<ProviderCreateWithoutContractInput>;
  update?: Maybe<ProviderUpdateWithoutContractDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutContractInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutContractDataInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface SocialMediaUpdateManyWithoutProviderInput {
  create?: Maybe<
    | SocialMediaCreateWithoutProviderInput[]
    | SocialMediaCreateWithoutProviderInput
  >;
  delete?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  connect?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  set?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  disconnect?: Maybe<
    SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput
  >;
  update?: Maybe<
    | SocialMediaUpdateWithWhereUniqueWithoutProviderInput[]
    | SocialMediaUpdateWithWhereUniqueWithoutProviderInput
  >;
  upsert?: Maybe<
    | SocialMediaUpsertWithWhereUniqueWithoutProviderInput[]
    | SocialMediaUpsertWithWhereUniqueWithoutProviderInput
  >;
  deleteMany?: Maybe<
    SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput
  >;
  updateMany?: Maybe<
    | SocialMediaUpdateManyWithWhereNestedInput[]
    | SocialMediaUpdateManyWithWhereNestedInput
  >;
}

export interface SocialMediaUpdateWithWhereUniqueWithoutProviderInput {
  where: SocialMediaWhereUniqueInput;
  data: SocialMediaUpdateWithoutProviderDataInput;
}

export interface SocialMediaUpdateWithoutProviderDataInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface SocialMediaUpsertWithWhereUniqueWithoutProviderInput {
  where: SocialMediaWhereUniqueInput;
  update: SocialMediaUpdateWithoutProviderDataInput;
  create: SocialMediaCreateWithoutProviderInput;
}

export interface SocialMediaScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  facebook?: Maybe<String>;
  facebook_not?: Maybe<String>;
  facebook_in?: Maybe<String[] | String>;
  facebook_not_in?: Maybe<String[] | String>;
  facebook_lt?: Maybe<String>;
  facebook_lte?: Maybe<String>;
  facebook_gt?: Maybe<String>;
  facebook_gte?: Maybe<String>;
  facebook_contains?: Maybe<String>;
  facebook_not_contains?: Maybe<String>;
  facebook_starts_with?: Maybe<String>;
  facebook_not_starts_with?: Maybe<String>;
  facebook_ends_with?: Maybe<String>;
  facebook_not_ends_with?: Maybe<String>;
  linkedin?: Maybe<String>;
  linkedin_not?: Maybe<String>;
  linkedin_in?: Maybe<String[] | String>;
  linkedin_not_in?: Maybe<String[] | String>;
  linkedin_lt?: Maybe<String>;
  linkedin_lte?: Maybe<String>;
  linkedin_gt?: Maybe<String>;
  linkedin_gte?: Maybe<String>;
  linkedin_contains?: Maybe<String>;
  linkedin_not_contains?: Maybe<String>;
  linkedin_starts_with?: Maybe<String>;
  linkedin_not_starts_with?: Maybe<String>;
  linkedin_ends_with?: Maybe<String>;
  linkedin_not_ends_with?: Maybe<String>;
  twitter?: Maybe<String>;
  twitter_not?: Maybe<String>;
  twitter_in?: Maybe<String[] | String>;
  twitter_not_in?: Maybe<String[] | String>;
  twitter_lt?: Maybe<String>;
  twitter_lte?: Maybe<String>;
  twitter_gt?: Maybe<String>;
  twitter_gte?: Maybe<String>;
  twitter_contains?: Maybe<String>;
  twitter_not_contains?: Maybe<String>;
  twitter_starts_with?: Maybe<String>;
  twitter_not_starts_with?: Maybe<String>;
  twitter_ends_with?: Maybe<String>;
  twitter_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
  OR?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
  NOT?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
}

export interface SocialMediaUpdateManyWithWhereNestedInput {
  where: SocialMediaScalarWhereInput;
  data: SocialMediaUpdateManyDataInput;
}

export interface SocialMediaUpdateManyDataInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface UserUpdateManyWithoutProviderInput {
  create?: Maybe<
    UserCreateWithoutProviderInput[] | UserCreateWithoutProviderInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutProviderInput[]
    | UserUpdateWithWhereUniqueWithoutProviderInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutProviderInput[]
    | UserUpsertWithWhereUniqueWithoutProviderInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutProviderInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutProviderDataInput;
}

export interface UserUpdateWithoutProviderDataInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  tempPwd?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutProviderInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutProviderDataInput;
  create: UserCreateWithoutProviderInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  allowedToConnect?: Maybe<Boolean>;
  allowedToConnect_not?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  changedPwd_not?: Maybe<String>;
  changedPwd_in?: Maybe<String[] | String>;
  changedPwd_not_in?: Maybe<String[] | String>;
  changedPwd_lt?: Maybe<String>;
  changedPwd_lte?: Maybe<String>;
  changedPwd_gt?: Maybe<String>;
  changedPwd_gte?: Maybe<String>;
  changedPwd_contains?: Maybe<String>;
  changedPwd_not_contains?: Maybe<String>;
  changedPwd_starts_with?: Maybe<String>;
  changedPwd_not_starts_with?: Maybe<String>;
  changedPwd_ends_with?: Maybe<String>;
  changedPwd_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  givenName?: Maybe<String>;
  givenName_not?: Maybe<String>;
  givenName_in?: Maybe<String[] | String>;
  givenName_not_in?: Maybe<String[] | String>;
  givenName_lt?: Maybe<String>;
  givenName_lte?: Maybe<String>;
  givenName_gt?: Maybe<String>;
  givenName_gte?: Maybe<String>;
  givenName_contains?: Maybe<String>;
  givenName_not_contains?: Maybe<String>;
  givenName_starts_with?: Maybe<String>;
  givenName_not_starts_with?: Maybe<String>;
  givenName_ends_with?: Maybe<String>;
  givenName_not_ends_with?: Maybe<String>;
  lang?: Maybe<String>;
  lang_not?: Maybe<String>;
  lang_in?: Maybe<String[] | String>;
  lang_not_in?: Maybe<String[] | String>;
  lang_lt?: Maybe<String>;
  lang_lte?: Maybe<String>;
  lang_gt?: Maybe<String>;
  lang_gte?: Maybe<String>;
  lang_contains?: Maybe<String>;
  lang_not_contains?: Maybe<String>;
  lang_starts_with?: Maybe<String>;
  lang_not_starts_with?: Maybe<String>;
  lang_ends_with?: Maybe<String>;
  lang_not_ends_with?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  lastlogin_not?: Maybe<DateTimeInput>;
  lastlogin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastlogin_lt?: Maybe<DateTimeInput>;
  lastlogin_lte?: Maybe<DateTimeInput>;
  lastlogin_gt?: Maybe<DateTimeInput>;
  lastlogin_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  numberlogin_not?: Maybe<Int>;
  numberlogin_in?: Maybe<Int[] | Int>;
  numberlogin_not_in?: Maybe<Int[] | Int>;
  numberlogin_lt?: Maybe<Int>;
  numberlogin_lte?: Maybe<Int>;
  numberlogin_gt?: Maybe<Int>;
  numberlogin_gte?: Maybe<Int>;
  tempPwd?: Maybe<String>;
  tempPwd_not?: Maybe<String>;
  tempPwd_in?: Maybe<String[] | String>;
  tempPwd_not_in?: Maybe<String[] | String>;
  tempPwd_lt?: Maybe<String>;
  tempPwd_lte?: Maybe<String>;
  tempPwd_gt?: Maybe<String>;
  tempPwd_gte?: Maybe<String>;
  tempPwd_contains?: Maybe<String>;
  tempPwd_not_contains?: Maybe<String>;
  tempPwd_starts_with?: Maybe<String>;
  tempPwd_not_starts_with?: Maybe<String>;
  tempPwd_ends_with?: Maybe<String>;
  tempPwd_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  tempPwd?: Maybe<String>;
}

export interface ProviderUpsertWithoutContractInput {
  update: ProviderUpdateWithoutContractDataInput;
  create: ProviderCreateWithoutContractInput;
}

export interface ContractUpsertWithWhereUniqueWithoutCustomerInput {
  where: ContractWhereUniqueInput;
  update: ContractUpdateWithoutCustomerDataInput;
  create: ContractCreateWithoutCustomerInput;
}

export interface ContractScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  accountManagerEmail?: Maybe<String>;
  accountManagerEmail_not?: Maybe<String>;
  accountManagerEmail_in?: Maybe<String[] | String>;
  accountManagerEmail_not_in?: Maybe<String[] | String>;
  accountManagerEmail_lt?: Maybe<String>;
  accountManagerEmail_lte?: Maybe<String>;
  accountManagerEmail_gt?: Maybe<String>;
  accountManagerEmail_gte?: Maybe<String>;
  accountManagerEmail_contains?: Maybe<String>;
  accountManagerEmail_not_contains?: Maybe<String>;
  accountManagerEmail_starts_with?: Maybe<String>;
  accountManagerEmail_not_starts_with?: Maybe<String>;
  accountManagerEmail_ends_with?: Maybe<String>;
  accountManagerEmail_not_ends_with?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerGSM_not?: Maybe<String>;
  accountManagerGSM_in?: Maybe<String[] | String>;
  accountManagerGSM_not_in?: Maybe<String[] | String>;
  accountManagerGSM_lt?: Maybe<String>;
  accountManagerGSM_lte?: Maybe<String>;
  accountManagerGSM_gt?: Maybe<String>;
  accountManagerGSM_gte?: Maybe<String>;
  accountManagerGSM_contains?: Maybe<String>;
  accountManagerGSM_not_contains?: Maybe<String>;
  accountManagerGSM_starts_with?: Maybe<String>;
  accountManagerGSM_not_starts_with?: Maybe<String>;
  accountManagerGSM_ends_with?: Maybe<String>;
  accountManagerGSM_not_ends_with?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerName_not?: Maybe<String>;
  accountManagerName_in?: Maybe<String[] | String>;
  accountManagerName_not_in?: Maybe<String[] | String>;
  accountManagerName_lt?: Maybe<String>;
  accountManagerName_lte?: Maybe<String>;
  accountManagerName_gt?: Maybe<String>;
  accountManagerName_gte?: Maybe<String>;
  accountManagerName_contains?: Maybe<String>;
  accountManagerName_not_contains?: Maybe<String>;
  accountManagerName_starts_with?: Maybe<String>;
  accountManagerName_not_starts_with?: Maybe<String>;
  accountManagerName_ends_with?: Maybe<String>;
  accountManagerName_not_ends_with?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  accountManagerPhone_not?: Maybe<String>;
  accountManagerPhone_in?: Maybe<String[] | String>;
  accountManagerPhone_not_in?: Maybe<String[] | String>;
  accountManagerPhone_lt?: Maybe<String>;
  accountManagerPhone_lte?: Maybe<String>;
  accountManagerPhone_gt?: Maybe<String>;
  accountManagerPhone_gte?: Maybe<String>;
  accountManagerPhone_contains?: Maybe<String>;
  accountManagerPhone_not_contains?: Maybe<String>;
  accountManagerPhone_starts_with?: Maybe<String>;
  accountManagerPhone_not_starts_with?: Maybe<String>;
  accountManagerPhone_ends_with?: Maybe<String>;
  accountManagerPhone_not_ends_with?: Maybe<String>;
  clientNumber?: Maybe<String>;
  clientNumber_not?: Maybe<String>;
  clientNumber_in?: Maybe<String[] | String>;
  clientNumber_not_in?: Maybe<String[] | String>;
  clientNumber_lt?: Maybe<String>;
  clientNumber_lte?: Maybe<String>;
  clientNumber_gt?: Maybe<String>;
  clientNumber_gte?: Maybe<String>;
  clientNumber_contains?: Maybe<String>;
  clientNumber_not_contains?: Maybe<String>;
  clientNumber_starts_with?: Maybe<String>;
  clientNumber_not_starts_with?: Maybe<String>;
  clientNumber_ends_with?: Maybe<String>;
  clientNumber_not_ends_with?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractAutoReconduct_not?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractBudget_not?: Maybe<Float>;
  contractBudget_in?: Maybe<Float[] | Float>;
  contractBudget_not_in?: Maybe<Float[] | Float>;
  contractBudget_lt?: Maybe<Float>;
  contractBudget_lte?: Maybe<Float>;
  contractBudget_gt?: Maybe<Float>;
  contractBudget_gte?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlert_not?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractEndingAlertTime_not?: Maybe<Int>;
  contractEndingAlertTime_in?: Maybe<Int[] | Int>;
  contractEndingAlertTime_not_in?: Maybe<Int[] | Int>;
  contractEndingAlertTime_lt?: Maybe<Int>;
  contractEndingAlertTime_lte?: Maybe<Int>;
  contractEndingAlertTime_gt?: Maybe<Int>;
  contractEndingAlertTime_gte?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractID_not?: Maybe<String>;
  contractID_in?: Maybe<String[] | String>;
  contractID_not_in?: Maybe<String[] | String>;
  contractID_lt?: Maybe<String>;
  contractID_lte?: Maybe<String>;
  contractID_gt?: Maybe<String>;
  contractID_gte?: Maybe<String>;
  contractID_contains?: Maybe<String>;
  contractID_not_contains?: Maybe<String>;
  contractID_starts_with?: Maybe<String>;
  contractID_not_starts_with?: Maybe<String>;
  contractID_ends_with?: Maybe<String>;
  contractID_not_ends_with?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractNumber_not?: Maybe<String>;
  contractNumber_in?: Maybe<String[] | String>;
  contractNumber_not_in?: Maybe<String[] | String>;
  contractNumber_lt?: Maybe<String>;
  contractNumber_lte?: Maybe<String>;
  contractNumber_gt?: Maybe<String>;
  contractNumber_gte?: Maybe<String>;
  contractNumber_contains?: Maybe<String>;
  contractNumber_not_contains?: Maybe<String>;
  contractNumber_starts_with?: Maybe<String>;
  contractNumber_not_starts_with?: Maybe<String>;
  contractNumber_ends_with?: Maybe<String>;
  contractNumber_not_ends_with?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractPreavis_not?: Maybe<Int>;
  contractPreavis_in?: Maybe<Int[] | Int>;
  contractPreavis_not_in?: Maybe<Int[] | Int>;
  contractPreavis_lt?: Maybe<Int>;
  contractPreavis_lte?: Maybe<Int>;
  contractPreavis_gt?: Maybe<Int>;
  contractPreavis_gte?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractStart_not?: Maybe<DateTimeInput>;
  contractStart_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contractStart_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contractStart_lt?: Maybe<DateTimeInput>;
  contractStart_lte?: Maybe<DateTimeInput>;
  contractStart_gt?: Maybe<DateTimeInput>;
  contractStart_gte?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractTime_not?: Maybe<Int>;
  contractTime_in?: Maybe<Int[] | Int>;
  contractTime_not_in?: Maybe<Int[] | Int>;
  contractTime_lt?: Maybe<Int>;
  contractTime_lte?: Maybe<Int>;
  contractTime_gt?: Maybe<Int>;
  contractTime_gte?: Maybe<Int>;
  contractType?: Maybe<String>;
  contractType_not?: Maybe<String>;
  contractType_in?: Maybe<String[] | String>;
  contractType_not_in?: Maybe<String[] | String>;
  contractType_lt?: Maybe<String>;
  contractType_lte?: Maybe<String>;
  contractType_gt?: Maybe<String>;
  contractType_gte?: Maybe<String>;
  contractType_contains?: Maybe<String>;
  contractType_not_contains?: Maybe<String>;
  contractType_starts_with?: Maybe<String>;
  contractType_not_starts_with?: Maybe<String>;
  contractType_ends_with?: Maybe<String>;
  contractType_not_ends_with?: Maybe<String>;
  selectionID?: Maybe<String>;
  selectionID_not?: Maybe<String>;
  selectionID_in?: Maybe<String[] | String>;
  selectionID_not_in?: Maybe<String[] | String>;
  selectionID_lt?: Maybe<String>;
  selectionID_lte?: Maybe<String>;
  selectionID_gt?: Maybe<String>;
  selectionID_gte?: Maybe<String>;
  selectionID_contains?: Maybe<String>;
  selectionID_not_contains?: Maybe<String>;
  selectionID_starts_with?: Maybe<String>;
  selectionID_not_starts_with?: Maybe<String>;
  selectionID_ends_with?: Maybe<String>;
  selectionID_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  OR?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  NOT?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
}

export interface ContractUpdateManyWithWhereNestedInput {
  where: ContractScalarWhereInput;
  data: ContractUpdateManyDataInput;
}

export interface ContractUpdateManyDataInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  selectionID?: Maybe<String>;
}

export interface CustomerUpsertWithoutReviewInput {
  update: CustomerUpdateWithoutReviewDataInput;
  create: CustomerCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutProviderInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutProviderDataInput;
  create: ReviewCreateWithoutProviderInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentEn_not?: Maybe<String>;
  contentEn_in?: Maybe<String[] | String>;
  contentEn_not_in?: Maybe<String[] | String>;
  contentEn_lt?: Maybe<String>;
  contentEn_lte?: Maybe<String>;
  contentEn_gt?: Maybe<String>;
  contentEn_gte?: Maybe<String>;
  contentEn_contains?: Maybe<String>;
  contentEn_not_contains?: Maybe<String>;
  contentEn_starts_with?: Maybe<String>;
  contentEn_not_starts_with?: Maybe<String>;
  contentEn_ends_with?: Maybe<String>;
  contentEn_not_ends_with?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentFr_not?: Maybe<String>;
  contentFr_in?: Maybe<String[] | String>;
  contentFr_not_in?: Maybe<String[] | String>;
  contentFr_lt?: Maybe<String>;
  contentFr_lte?: Maybe<String>;
  contentFr_gt?: Maybe<String>;
  contentFr_gte?: Maybe<String>;
  contentFr_contains?: Maybe<String>;
  contentFr_not_contains?: Maybe<String>;
  contentFr_starts_with?: Maybe<String>;
  contentFr_not_starts_with?: Maybe<String>;
  contentFr_ends_with?: Maybe<String>;
  contentFr_not_ends_with?: Maybe<String>;
  contentNl?: Maybe<String>;
  contentNl_not?: Maybe<String>;
  contentNl_in?: Maybe<String[] | String>;
  contentNl_not_in?: Maybe<String[] | String>;
  contentNl_lt?: Maybe<String>;
  contentNl_lte?: Maybe<String>;
  contentNl_gt?: Maybe<String>;
  contentNl_gte?: Maybe<String>;
  contentNl_contains?: Maybe<String>;
  contentNl_not_contains?: Maybe<String>;
  contentNl_starts_with?: Maybe<String>;
  contentNl_not_starts_with?: Maybe<String>;
  contentNl_ends_with?: Maybe<String>;
  contentNl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  originalLang?: Maybe<String>;
  originalLang_not?: Maybe<String>;
  originalLang_in?: Maybe<String[] | String>;
  originalLang_not_in?: Maybe<String[] | String>;
  originalLang_lt?: Maybe<String>;
  originalLang_lte?: Maybe<String>;
  originalLang_gt?: Maybe<String>;
  originalLang_gte?: Maybe<String>;
  originalLang_contains?: Maybe<String>;
  originalLang_not_contains?: Maybe<String>;
  originalLang_starts_with?: Maybe<String>;
  originalLang_not_starts_with?: Maybe<String>;
  originalLang_ends_with?: Maybe<String>;
  originalLang_not_ends_with?: Maybe<String>;
  pricing?: Maybe<Int>;
  pricing_not?: Maybe<Int>;
  pricing_in?: Maybe<Int[] | Int>;
  pricing_not_in?: Maybe<Int[] | Int>;
  pricing_lt?: Maybe<Int>;
  pricing_lte?: Maybe<Int>;
  pricing_gt?: Maybe<Int>;
  pricing_gte?: Maybe<Int>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  reply?: Maybe<String>;
  reply_not?: Maybe<String>;
  reply_in?: Maybe<String[] | String>;
  reply_not_in?: Maybe<String[] | String>;
  reply_lt?: Maybe<String>;
  reply_lte?: Maybe<String>;
  reply_gt?: Maybe<String>;
  reply_gte?: Maybe<String>;
  reply_contains?: Maybe<String>;
  reply_not_contains?: Maybe<String>;
  reply_starts_with?: Maybe<String>;
  reply_not_starts_with?: Maybe<String>;
  reply_ends_with?: Maybe<String>;
  reply_not_ends_with?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyCreatedAt_not?: Maybe<DateTimeInput>;
  replyCreatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  replyCreatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  replyCreatedAt_lt?: Maybe<DateTimeInput>;
  replyCreatedAt_lte?: Maybe<DateTimeInput>;
  replyCreatedAt_gt?: Maybe<DateTimeInput>;
  replyCreatedAt_gte?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyEn_not?: Maybe<String>;
  replyEn_in?: Maybe<String[] | String>;
  replyEn_not_in?: Maybe<String[] | String>;
  replyEn_lt?: Maybe<String>;
  replyEn_lte?: Maybe<String>;
  replyEn_gt?: Maybe<String>;
  replyEn_gte?: Maybe<String>;
  replyEn_contains?: Maybe<String>;
  replyEn_not_contains?: Maybe<String>;
  replyEn_starts_with?: Maybe<String>;
  replyEn_not_starts_with?: Maybe<String>;
  replyEn_ends_with?: Maybe<String>;
  replyEn_not_ends_with?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyFr_not?: Maybe<String>;
  replyFr_in?: Maybe<String[] | String>;
  replyFr_not_in?: Maybe<String[] | String>;
  replyFr_lt?: Maybe<String>;
  replyFr_lte?: Maybe<String>;
  replyFr_gt?: Maybe<String>;
  replyFr_gte?: Maybe<String>;
  replyFr_contains?: Maybe<String>;
  replyFr_not_contains?: Maybe<String>;
  replyFr_starts_with?: Maybe<String>;
  replyFr_not_starts_with?: Maybe<String>;
  replyFr_ends_with?: Maybe<String>;
  replyFr_not_ends_with?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyNl_not?: Maybe<String>;
  replyNl_in?: Maybe<String[] | String>;
  replyNl_not_in?: Maybe<String[] | String>;
  replyNl_lt?: Maybe<String>;
  replyNl_lte?: Maybe<String>;
  replyNl_gt?: Maybe<String>;
  replyNl_gte?: Maybe<String>;
  replyNl_contains?: Maybe<String>;
  replyNl_not_contains?: Maybe<String>;
  replyNl_starts_with?: Maybe<String>;
  replyNl_not_starts_with?: Maybe<String>;
  replyNl_ends_with?: Maybe<String>;
  replyNl_not_ends_with?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  replyOriginal_not?: Maybe<String>;
  replyOriginal_in?: Maybe<String[] | String>;
  replyOriginal_not_in?: Maybe<String[] | String>;
  replyOriginal_lt?: Maybe<String>;
  replyOriginal_lte?: Maybe<String>;
  replyOriginal_gt?: Maybe<String>;
  replyOriginal_gte?: Maybe<String>;
  replyOriginal_contains?: Maybe<String>;
  replyOriginal_not_contains?: Maybe<String>;
  replyOriginal_starts_with?: Maybe<String>;
  replyOriginal_not_starts_with?: Maybe<String>;
  replyOriginal_ends_with?: Maybe<String>;
  replyOriginal_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleEn_not?: Maybe<String>;
  titleEn_in?: Maybe<String[] | String>;
  titleEn_not_in?: Maybe<String[] | String>;
  titleEn_lt?: Maybe<String>;
  titleEn_lte?: Maybe<String>;
  titleEn_gt?: Maybe<String>;
  titleEn_gte?: Maybe<String>;
  titleEn_contains?: Maybe<String>;
  titleEn_not_contains?: Maybe<String>;
  titleEn_starts_with?: Maybe<String>;
  titleEn_not_starts_with?: Maybe<String>;
  titleEn_ends_with?: Maybe<String>;
  titleEn_not_ends_with?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleFr_not?: Maybe<String>;
  titleFr_in?: Maybe<String[] | String>;
  titleFr_not_in?: Maybe<String[] | String>;
  titleFr_lt?: Maybe<String>;
  titleFr_lte?: Maybe<String>;
  titleFr_gt?: Maybe<String>;
  titleFr_gte?: Maybe<String>;
  titleFr_contains?: Maybe<String>;
  titleFr_not_contains?: Maybe<String>;
  titleFr_starts_with?: Maybe<String>;
  titleFr_not_starts_with?: Maybe<String>;
  titleFr_ends_with?: Maybe<String>;
  titleFr_not_ends_with?: Maybe<String>;
  titleNl?: Maybe<String>;
  titleNl_not?: Maybe<String>;
  titleNl_in?: Maybe<String[] | String>;
  titleNl_not_in?: Maybe<String[] | String>;
  titleNl_lt?: Maybe<String>;
  titleNl_lte?: Maybe<String>;
  titleNl_gt?: Maybe<String>;
  titleNl_gte?: Maybe<String>;
  titleNl_contains?: Maybe<String>;
  titleNl_not_contains?: Maybe<String>;
  titleNl_starts_with?: Maybe<String>;
  titleNl_not_starts_with?: Maybe<String>;
  titleNl_ends_with?: Maybe<String>;
  titleNl_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  upvote?: Maybe<Int>;
  upvote_not?: Maybe<Int>;
  upvote_in?: Maybe<Int[] | Int>;
  upvote_not_in?: Maybe<Int[] | Int>;
  upvote_lt?: Maybe<Int>;
  upvote_lte?: Maybe<Int>;
  upvote_gt?: Maybe<Int>;
  upvote_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  content?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  rating?: Maybe<Int>;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ProviderUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProviderWhereUniqueInput;
  update: ProviderUpdateWithoutCategoryDataInput;
  create: ProviderCreateWithoutCategoryInput;
}

export interface ProviderScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contactEmail_not?: Maybe<String>;
  contactEmail_in?: Maybe<String[] | String>;
  contactEmail_not_in?: Maybe<String[] | String>;
  contactEmail_lt?: Maybe<String>;
  contactEmail_lte?: Maybe<String>;
  contactEmail_gt?: Maybe<String>;
  contactEmail_gte?: Maybe<String>;
  contactEmail_contains?: Maybe<String>;
  contactEmail_not_contains?: Maybe<String>;
  contactEmail_starts_with?: Maybe<String>;
  contactEmail_not_starts_with?: Maybe<String>;
  contactEmail_ends_with?: Maybe<String>;
  contactEmail_not_ends_with?: Maybe<String>;
  contacten?: Maybe<String>;
  contacten_not?: Maybe<String>;
  contacten_in?: Maybe<String[] | String>;
  contacten_not_in?: Maybe<String[] | String>;
  contacten_lt?: Maybe<String>;
  contacten_lte?: Maybe<String>;
  contacten_gt?: Maybe<String>;
  contacten_gte?: Maybe<String>;
  contacten_contains?: Maybe<String>;
  contacten_not_contains?: Maybe<String>;
  contacten_starts_with?: Maybe<String>;
  contacten_not_starts_with?: Maybe<String>;
  contacten_ends_with?: Maybe<String>;
  contacten_not_ends_with?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactfr_not?: Maybe<String>;
  contactfr_in?: Maybe<String[] | String>;
  contactfr_not_in?: Maybe<String[] | String>;
  contactfr_lt?: Maybe<String>;
  contactfr_lte?: Maybe<String>;
  contactfr_gt?: Maybe<String>;
  contactfr_gte?: Maybe<String>;
  contactfr_contains?: Maybe<String>;
  contactfr_not_contains?: Maybe<String>;
  contactfr_starts_with?: Maybe<String>;
  contactfr_not_starts_with?: Maybe<String>;
  contactfr_ends_with?: Maybe<String>;
  contactfr_not_ends_with?: Maybe<String>;
  contactnl?: Maybe<String>;
  contactnl_not?: Maybe<String>;
  contactnl_in?: Maybe<String[] | String>;
  contactnl_not_in?: Maybe<String[] | String>;
  contactnl_lt?: Maybe<String>;
  contactnl_lte?: Maybe<String>;
  contactnl_gt?: Maybe<String>;
  contactnl_gte?: Maybe<String>;
  contactnl_contains?: Maybe<String>;
  contactnl_not_contains?: Maybe<String>;
  contactnl_starts_with?: Maybe<String>;
  contactnl_not_starts_with?: Maybe<String>;
  contactnl_ends_with?: Maybe<String>;
  contactnl_not_ends_with?: Maybe<String>;
  countryId?: Maybe<Int>;
  countryId_not?: Maybe<Int>;
  countryId_in?: Maybe<Int[] | Int>;
  countryId_not_in?: Maybe<Int[] | Int>;
  countryId_lt?: Maybe<Int>;
  countryId_lte?: Maybe<Int>;
  countryId_gt?: Maybe<Int>;
  countryId_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  emailen?: Maybe<String>;
  emailen_not?: Maybe<String>;
  emailen_in?: Maybe<String[] | String>;
  emailen_not_in?: Maybe<String[] | String>;
  emailen_lt?: Maybe<String>;
  emailen_lte?: Maybe<String>;
  emailen_gt?: Maybe<String>;
  emailen_gte?: Maybe<String>;
  emailen_contains?: Maybe<String>;
  emailen_not_contains?: Maybe<String>;
  emailen_starts_with?: Maybe<String>;
  emailen_not_starts_with?: Maybe<String>;
  emailen_ends_with?: Maybe<String>;
  emailen_not_ends_with?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailfr_not?: Maybe<String>;
  emailfr_in?: Maybe<String[] | String>;
  emailfr_not_in?: Maybe<String[] | String>;
  emailfr_lt?: Maybe<String>;
  emailfr_lte?: Maybe<String>;
  emailfr_gt?: Maybe<String>;
  emailfr_gte?: Maybe<String>;
  emailfr_contains?: Maybe<String>;
  emailfr_not_contains?: Maybe<String>;
  emailfr_starts_with?: Maybe<String>;
  emailfr_not_starts_with?: Maybe<String>;
  emailfr_ends_with?: Maybe<String>;
  emailfr_not_ends_with?: Maybe<String>;
  emailnl?: Maybe<String>;
  emailnl_not?: Maybe<String>;
  emailnl_in?: Maybe<String[] | String>;
  emailnl_not_in?: Maybe<String[] | String>;
  emailnl_lt?: Maybe<String>;
  emailnl_lte?: Maybe<String>;
  emailnl_gt?: Maybe<String>;
  emailnl_gte?: Maybe<String>;
  emailnl_contains?: Maybe<String>;
  emailnl_not_contains?: Maybe<String>;
  emailnl_starts_with?: Maybe<String>;
  emailnl_not_starts_with?: Maybe<String>;
  emailnl_ends_with?: Maybe<String>;
  emailnl_not_ends_with?: Maybe<String>;
  faq?: Maybe<String>;
  faq_not?: Maybe<String>;
  faq_in?: Maybe<String[] | String>;
  faq_not_in?: Maybe<String[] | String>;
  faq_lt?: Maybe<String>;
  faq_lte?: Maybe<String>;
  faq_gt?: Maybe<String>;
  faq_gte?: Maybe<String>;
  faq_contains?: Maybe<String>;
  faq_not_contains?: Maybe<String>;
  faq_starts_with?: Maybe<String>;
  faq_not_starts_with?: Maybe<String>;
  faq_ends_with?: Maybe<String>;
  faq_not_ends_with?: Maybe<String>;
  faqen?: Maybe<String>;
  faqen_not?: Maybe<String>;
  faqen_in?: Maybe<String[] | String>;
  faqen_not_in?: Maybe<String[] | String>;
  faqen_lt?: Maybe<String>;
  faqen_lte?: Maybe<String>;
  faqen_gt?: Maybe<String>;
  faqen_gte?: Maybe<String>;
  faqen_contains?: Maybe<String>;
  faqen_not_contains?: Maybe<String>;
  faqen_starts_with?: Maybe<String>;
  faqen_not_starts_with?: Maybe<String>;
  faqen_ends_with?: Maybe<String>;
  faqen_not_ends_with?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqfr_not?: Maybe<String>;
  faqfr_in?: Maybe<String[] | String>;
  faqfr_not_in?: Maybe<String[] | String>;
  faqfr_lt?: Maybe<String>;
  faqfr_lte?: Maybe<String>;
  faqfr_gt?: Maybe<String>;
  faqfr_gte?: Maybe<String>;
  faqfr_contains?: Maybe<String>;
  faqfr_not_contains?: Maybe<String>;
  faqfr_starts_with?: Maybe<String>;
  faqfr_not_starts_with?: Maybe<String>;
  faqfr_ends_with?: Maybe<String>;
  faqfr_not_ends_with?: Maybe<String>;
  faqnl?: Maybe<String>;
  faqnl_not?: Maybe<String>;
  faqnl_in?: Maybe<String[] | String>;
  faqnl_not_in?: Maybe<String[] | String>;
  faqnl_lt?: Maybe<String>;
  faqnl_lte?: Maybe<String>;
  faqnl_gt?: Maybe<String>;
  faqnl_gte?: Maybe<String>;
  faqnl_contains?: Maybe<String>;
  faqnl_not_contains?: Maybe<String>;
  faqnl_starts_with?: Maybe<String>;
  faqnl_not_starts_with?: Maybe<String>;
  faqnl_ends_with?: Maybe<String>;
  faqnl_not_ends_with?: Maybe<String>;
  login?: Maybe<String>;
  login_not?: Maybe<String>;
  login_in?: Maybe<String[] | String>;
  login_not_in?: Maybe<String[] | String>;
  login_lt?: Maybe<String>;
  login_lte?: Maybe<String>;
  login_gt?: Maybe<String>;
  login_gte?: Maybe<String>;
  login_contains?: Maybe<String>;
  login_not_contains?: Maybe<String>;
  login_starts_with?: Maybe<String>;
  login_not_starts_with?: Maybe<String>;
  login_ends_with?: Maybe<String>;
  login_not_ends_with?: Maybe<String>;
  loginen?: Maybe<String>;
  loginen_not?: Maybe<String>;
  loginen_in?: Maybe<String[] | String>;
  loginen_not_in?: Maybe<String[] | String>;
  loginen_lt?: Maybe<String>;
  loginen_lte?: Maybe<String>;
  loginen_gt?: Maybe<String>;
  loginen_gte?: Maybe<String>;
  loginen_contains?: Maybe<String>;
  loginen_not_contains?: Maybe<String>;
  loginen_starts_with?: Maybe<String>;
  loginen_not_starts_with?: Maybe<String>;
  loginen_ends_with?: Maybe<String>;
  loginen_not_ends_with?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginfr_not?: Maybe<String>;
  loginfr_in?: Maybe<String[] | String>;
  loginfr_not_in?: Maybe<String[] | String>;
  loginfr_lt?: Maybe<String>;
  loginfr_lte?: Maybe<String>;
  loginfr_gt?: Maybe<String>;
  loginfr_gte?: Maybe<String>;
  loginfr_contains?: Maybe<String>;
  loginfr_not_contains?: Maybe<String>;
  loginfr_starts_with?: Maybe<String>;
  loginfr_not_starts_with?: Maybe<String>;
  loginfr_ends_with?: Maybe<String>;
  loginfr_not_ends_with?: Maybe<String>;
  loginnl?: Maybe<String>;
  loginnl_not?: Maybe<String>;
  loginnl_in?: Maybe<String[] | String>;
  loginnl_not_in?: Maybe<String[] | String>;
  loginnl_lt?: Maybe<String>;
  loginnl_lte?: Maybe<String>;
  loginnl_gt?: Maybe<String>;
  loginnl_gte?: Maybe<String>;
  loginnl_contains?: Maybe<String>;
  loginnl_not_contains?: Maybe<String>;
  loginnl_starts_with?: Maybe<String>;
  loginnl_not_starts_with?: Maybe<String>;
  loginnl_ends_with?: Maybe<String>;
  loginnl_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  phoneen?: Maybe<String>;
  phoneen_not?: Maybe<String>;
  phoneen_in?: Maybe<String[] | String>;
  phoneen_not_in?: Maybe<String[] | String>;
  phoneen_lt?: Maybe<String>;
  phoneen_lte?: Maybe<String>;
  phoneen_gt?: Maybe<String>;
  phoneen_gte?: Maybe<String>;
  phoneen_contains?: Maybe<String>;
  phoneen_not_contains?: Maybe<String>;
  phoneen_starts_with?: Maybe<String>;
  phoneen_not_starts_with?: Maybe<String>;
  phoneen_ends_with?: Maybe<String>;
  phoneen_not_ends_with?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonefr_not?: Maybe<String>;
  phonefr_in?: Maybe<String[] | String>;
  phonefr_not_in?: Maybe<String[] | String>;
  phonefr_lt?: Maybe<String>;
  phonefr_lte?: Maybe<String>;
  phonefr_gt?: Maybe<String>;
  phonefr_gte?: Maybe<String>;
  phonefr_contains?: Maybe<String>;
  phonefr_not_contains?: Maybe<String>;
  phonefr_starts_with?: Maybe<String>;
  phonefr_not_starts_with?: Maybe<String>;
  phonefr_ends_with?: Maybe<String>;
  phonefr_not_ends_with?: Maybe<String>;
  phonenl?: Maybe<String>;
  phonenl_not?: Maybe<String>;
  phonenl_in?: Maybe<String[] | String>;
  phonenl_not_in?: Maybe<String[] | String>;
  phonenl_lt?: Maybe<String>;
  phonenl_lte?: Maybe<String>;
  phonenl_gt?: Maybe<String>;
  phonenl_gte?: Maybe<String>;
  phonenl_contains?: Maybe<String>;
  phonenl_not_contains?: Maybe<String>;
  phonenl_starts_with?: Maybe<String>;
  phonenl_not_starts_with?: Maybe<String>;
  phonenl_ends_with?: Maybe<String>;
  phonenl_not_ends_with?: Maybe<String>;
  pricingAVG?: Maybe<Float>;
  pricingAVG_not?: Maybe<Float>;
  pricingAVG_in?: Maybe<Float[] | Float>;
  pricingAVG_not_in?: Maybe<Float[] | Float>;
  pricingAVG_lt?: Maybe<Float>;
  pricingAVG_lte?: Maybe<Float>;
  pricingAVG_gt?: Maybe<Float>;
  pricingAVG_gte?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  ratingAVG_not?: Maybe<Float>;
  ratingAVG_in?: Maybe<Float[] | Float>;
  ratingAVG_not_in?: Maybe<Float[] | Float>;
  ratingAVG_lt?: Maybe<Float>;
  ratingAVG_lte?: Maybe<Float>;
  ratingAVG_gt?: Maybe<Float>;
  ratingAVG_gte?: Maybe<Float>;
  shops?: Maybe<String>;
  shops_not?: Maybe<String>;
  shops_in?: Maybe<String[] | String>;
  shops_not_in?: Maybe<String[] | String>;
  shops_lt?: Maybe<String>;
  shops_lte?: Maybe<String>;
  shops_gt?: Maybe<String>;
  shops_gte?: Maybe<String>;
  shops_contains?: Maybe<String>;
  shops_not_contains?: Maybe<String>;
  shops_starts_with?: Maybe<String>;
  shops_not_starts_with?: Maybe<String>;
  shops_ends_with?: Maybe<String>;
  shops_not_ends_with?: Maybe<String>;
  site?: Maybe<String>;
  site_not?: Maybe<String>;
  site_in?: Maybe<String[] | String>;
  site_not_in?: Maybe<String[] | String>;
  site_lt?: Maybe<String>;
  site_lte?: Maybe<String>;
  site_gt?: Maybe<String>;
  site_gte?: Maybe<String>;
  site_contains?: Maybe<String>;
  site_not_contains?: Maybe<String>;
  site_starts_with?: Maybe<String>;
  site_not_starts_with?: Maybe<String>;
  site_ends_with?: Maybe<String>;
  site_not_ends_with?: Maybe<String>;
  siteen?: Maybe<String>;
  siteen_not?: Maybe<String>;
  siteen_in?: Maybe<String[] | String>;
  siteen_not_in?: Maybe<String[] | String>;
  siteen_lt?: Maybe<String>;
  siteen_lte?: Maybe<String>;
  siteen_gt?: Maybe<String>;
  siteen_gte?: Maybe<String>;
  siteen_contains?: Maybe<String>;
  siteen_not_contains?: Maybe<String>;
  siteen_starts_with?: Maybe<String>;
  siteen_not_starts_with?: Maybe<String>;
  siteen_ends_with?: Maybe<String>;
  siteen_not_ends_with?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitefr_not?: Maybe<String>;
  sitefr_in?: Maybe<String[] | String>;
  sitefr_not_in?: Maybe<String[] | String>;
  sitefr_lt?: Maybe<String>;
  sitefr_lte?: Maybe<String>;
  sitefr_gt?: Maybe<String>;
  sitefr_gte?: Maybe<String>;
  sitefr_contains?: Maybe<String>;
  sitefr_not_contains?: Maybe<String>;
  sitefr_starts_with?: Maybe<String>;
  sitefr_not_starts_with?: Maybe<String>;
  sitefr_ends_with?: Maybe<String>;
  sitefr_not_ends_with?: Maybe<String>;
  sitenl?: Maybe<String>;
  sitenl_not?: Maybe<String>;
  sitenl_in?: Maybe<String[] | String>;
  sitenl_not_in?: Maybe<String[] | String>;
  sitenl_lt?: Maybe<String>;
  sitenl_lte?: Maybe<String>;
  sitenl_gt?: Maybe<String>;
  sitenl_gte?: Maybe<String>;
  sitenl_contains?: Maybe<String>;
  sitenl_not_contains?: Maybe<String>;
  sitenl_starts_with?: Maybe<String>;
  sitenl_not_starts_with?: Maybe<String>;
  sitenl_ends_with?: Maybe<String>;
  sitenl_not_ends_with?: Maybe<String>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  test?: Maybe<String>;
  test_not?: Maybe<String>;
  test_in?: Maybe<String[] | String>;
  test_not_in?: Maybe<String[] | String>;
  test_lt?: Maybe<String>;
  test_lte?: Maybe<String>;
  test_gt?: Maybe<String>;
  test_gte?: Maybe<String>;
  test_contains?: Maybe<String>;
  test_not_contains?: Maybe<String>;
  test_starts_with?: Maybe<String>;
  test_not_starts_with?: Maybe<String>;
  test_ends_with?: Maybe<String>;
  test_not_ends_with?: Maybe<String>;
  testJson?: Maybe<String>;
  testJson_not?: Maybe<String>;
  testJson_in?: Maybe<String[] | String>;
  testJson_not_in?: Maybe<String[] | String>;
  testJson_lt?: Maybe<String>;
  testJson_lte?: Maybe<String>;
  testJson_gt?: Maybe<String>;
  testJson_gte?: Maybe<String>;
  testJson_contains?: Maybe<String>;
  testJson_not_contains?: Maybe<String>;
  testJson_starts_with?: Maybe<String>;
  testJson_not_starts_with?: Maybe<String>;
  testJson_ends_with?: Maybe<String>;
  testJson_not_ends_with?: Maybe<String>;
  tva?: Maybe<String>;
  tva_not?: Maybe<String>;
  tva_in?: Maybe<String[] | String>;
  tva_not_in?: Maybe<String[] | String>;
  tva_lt?: Maybe<String>;
  tva_lte?: Maybe<String>;
  tva_gt?: Maybe<String>;
  tva_gte?: Maybe<String>;
  tva_contains?: Maybe<String>;
  tva_not_contains?: Maybe<String>;
  tva_starts_with?: Maybe<String>;
  tva_not_starts_with?: Maybe<String>;
  tva_ends_with?: Maybe<String>;
  tva_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  widgetId_not?: Maybe<String>;
  widgetId_in?: Maybe<String[] | String>;
  widgetId_not_in?: Maybe<String[] | String>;
  widgetId_lt?: Maybe<String>;
  widgetId_lte?: Maybe<String>;
  widgetId_gt?: Maybe<String>;
  widgetId_gte?: Maybe<String>;
  widgetId_contains?: Maybe<String>;
  widgetId_not_contains?: Maybe<String>;
  widgetId_starts_with?: Maybe<String>;
  widgetId_not_starts_with?: Maybe<String>;
  widgetId_ends_with?: Maybe<String>;
  widgetId_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  OR?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  NOT?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
}

export interface ProviderUpdateManyWithWhereNestedInput {
  where: ProviderScalarWhereInput;
  data: ProviderUpdateManyDataInput;
}

export interface ProviderUpdateManyDataInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface CategoryUpsertWithoutContractInput {
  update: CategoryUpdateWithoutContractDataInput;
  create: CategoryCreateWithoutContractInput;
}

export interface ContractUpsertWithWhereUniqueWithoutProviderInput {
  where: ContractWhereUniqueInput;
  update: ContractUpdateWithoutProviderDataInput;
  create: ContractCreateWithoutProviderInput;
}

export interface ProviderUpsertWithoutReviewInput {
  update: ProviderUpdateWithoutReviewDataInput;
  create: ProviderCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutAuthorDataInput;
  create: ReviewCreateWithoutAuthorInput;
}

export interface CustomerUpsertWithoutContractInput {
  update: CustomerUpdateWithoutContractDataInput;
  create: CustomerCreateWithoutContractInput;
}

export interface ContractUpsertWithWhereUniqueWithoutCategoryInput {
  where: ContractWhereUniqueInput;
  update: ContractUpdateWithoutCategoryDataInput;
  create: ContractCreateWithoutCategoryInput;
}

export interface CategoryUpdateManyMutationInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface ContractCreateInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryCreateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID: String;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerCreateOneWithoutContractInput>;
  provider?: Maybe<ProviderCreateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface ContractUpdateInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneWithoutContractInput>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  customer?: Maybe<CustomerUpdateOneWithoutContractInput>;
  provider?: Maybe<ProviderUpdateOneWithoutContractInput>;
  selectionID?: Maybe<String>;
}

export interface ContractUpdateManyMutationInput {
  accountManagerEmail?: Maybe<String>;
  accountManagerGSM?: Maybe<String>;
  accountManagerName?: Maybe<String>;
  accountManagerPhone?: Maybe<String>;
  clientNumber?: Maybe<String>;
  contractAutoReconduct?: Maybe<Boolean>;
  contractBudget?: Maybe<Float>;
  contractEndingAlert?: Maybe<Boolean>;
  contractEndingAlertTime?: Maybe<Int>;
  contractID?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractPreavis?: Maybe<Int>;
  contractStart?: Maybe<DateTimeInput>;
  contractTime?: Maybe<Int>;
  contractType?: Maybe<String>;
  selectionID?: Maybe<String>;
}

export interface CustomerCreateInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutCustomerInput>;
  countryCode?: Maybe<String>;
  email: String;
  emailPro?: Maybe<String>;
  familyName: String;
  favProvs?: Maybe<String>;
  givenName: String;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name: String;
  numberlogin: Int;
  phone?: Maybe<String>;
  picture: String;
  review?: Maybe<ReviewCreateManyWithoutAuthorInput>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId: String;
}

export interface CustomerUpdateInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutCustomerInput>;
  countryCode?: Maybe<String>;
  email?: Maybe<String>;
  emailPro?: Maybe<String>;
  familyName?: Maybe<String>;
  favProvs?: Maybe<String>;
  givenName?: Maybe<String>;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  phone?: Maybe<String>;
  picture?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutAuthorInput>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface CustomerUpdateManyMutationInput {
  companyAddress?: Maybe<String>;
  companyCity?: Maybe<String>;
  companyCountry?: Maybe<String>;
  companyEmployee?: Maybe<Int>;
  companyName?: Maybe<String>;
  companyPhone?: Maybe<String>;
  companySize?: Maybe<String>;
  companyTva?: Maybe<String>;
  companyWebsite?: Maybe<String>;
  companyZip?: Maybe<String>;
  countryCode?: Maybe<String>;
  email?: Maybe<String>;
  emailPro?: Maybe<String>;
  familyName?: Maybe<String>;
  favProvs?: Maybe<String>;
  givenName?: Maybe<String>;
  gsm?: Maybe<String>;
  headline?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  phone?: Maybe<String>;
  picture?: Maybe<String>;
  title?: Maybe<String>;
  tuto?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface NewsletterCreateInput {
  email: String;
}

export interface NewsletterUpdateInput {
  email?: Maybe<String>;
}

export interface NewsletterUpdateManyMutationInput {
  email?: Maybe<String>;
}

export interface PriceCategoryCreateInput {
  name: String;
  provider?: Maybe<ProviderCreateManyWithoutPriceCategoryInput>;
}

export interface ProviderCreateManyWithoutPriceCategoryInput {
  create?: Maybe<
    | ProviderCreateWithoutPriceCategoryInput[]
    | ProviderCreateWithoutPriceCategoryInput
  >;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutPriceCategoryInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface PriceCategoryUpdateInput {
  name?: Maybe<String>;
  provider?: Maybe<ProviderUpdateManyWithoutPriceCategoryInput>;
}

export interface ProviderUpdateManyWithoutPriceCategoryInput {
  create?: Maybe<
    | ProviderCreateWithoutPriceCategoryInput[]
    | ProviderCreateWithoutPriceCategoryInput
  >;
  delete?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  set?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  disconnect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  update?: Maybe<
    | ProviderUpdateWithWhereUniqueWithoutPriceCategoryInput[]
    | ProviderUpdateWithWhereUniqueWithoutPriceCategoryInput
  >;
  upsert?: Maybe<
    | ProviderUpsertWithWhereUniqueWithoutPriceCategoryInput[]
    | ProviderUpsertWithWhereUniqueWithoutPriceCategoryInput
  >;
  deleteMany?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  updateMany?: Maybe<
    | ProviderUpdateManyWithWhereNestedInput[]
    | ProviderUpdateManyWithWhereNestedInput
  >;
}

export interface ProviderUpdateWithWhereUniqueWithoutPriceCategoryInput {
  where: ProviderWhereUniqueInput;
  data: ProviderUpdateWithoutPriceCategoryDataInput;
}

export interface ProviderUpdateWithoutPriceCategoryDataInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ProviderUpsertWithWhereUniqueWithoutPriceCategoryInput {
  where: ProviderWhereUniqueInput;
  update: ProviderUpdateWithoutPriceCategoryDataInput;
  create: ProviderCreateWithoutPriceCategoryInput;
}

export interface PriceCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProviderCreateInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ProviderUpdateInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ProviderUpdateManyMutationInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ReviewCreateInput {
  author?: Maybe<CustomerCreateOneWithoutReviewInput>;
  content: String;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  provider?: Maybe<ProviderCreateOneWithoutReviewInput>;
  rating: Int;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title: String;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ReviewUpdateInput {
  author?: Maybe<CustomerUpdateOneWithoutReviewInput>;
  content?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  provider?: Maybe<ProviderUpdateOneWithoutReviewInput>;
  rating?: Maybe<Int>;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ReviewUpdateManyMutationInput {
  content?: Maybe<String>;
  contentEn?: Maybe<String>;
  contentFr?: Maybe<String>;
  contentNl?: Maybe<String>;
  originalLang?: Maybe<String>;
  pricing?: Maybe<Int>;
  rating?: Maybe<Int>;
  reply?: Maybe<String>;
  replyCreatedAt?: Maybe<DateTimeInput>;
  replyEn?: Maybe<String>;
  replyFr?: Maybe<String>;
  replyNl?: Maybe<String>;
  replyOriginal?: Maybe<String>;
  title?: Maybe<String>;
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleNl?: Maybe<String>;
  upvote?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface SocialMediaCreateInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  provider?: Maybe<ProviderCreateOneWithoutSocialMediaInput>;
  twitter?: Maybe<String>;
}

export interface ProviderCreateOneWithoutSocialMediaInput {
  create?: Maybe<ProviderCreateWithoutSocialMediaInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutSocialMediaInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserCreateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface SocialMediaUpdateInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  provider?: Maybe<ProviderUpdateOneWithoutSocialMediaInput>;
  twitter?: Maybe<String>;
}

export interface ProviderUpdateOneWithoutSocialMediaInput {
  create?: Maybe<ProviderCreateWithoutSocialMediaInput>;
  update?: Maybe<ProviderUpdateWithoutSocialMediaDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutSocialMediaInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutSocialMediaDataInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  user?: Maybe<UserUpdateManyWithoutProviderInput>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ProviderUpsertWithoutSocialMediaInput {
  update: ProviderUpdateWithoutSocialMediaDataInput;
  create: ProviderCreateWithoutSocialMediaInput;
}

export interface SocialMediaUpdateManyMutationInput {
  facebook?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface SubCategoryCreateInput {
  category?: Maybe<CategoryCreateManyWithoutSubcategoryInput>;
  name: String;
  photo?: Maybe<String>;
}

export interface CategoryCreateManyWithoutSubcategoryInput {
  create?: Maybe<
    | CategoryCreateWithoutSubcategoryInput[]
    | CategoryCreateWithoutSubcategoryInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutSubcategoryInput {
  contract?: Maybe<ContractCreateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name: String;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderCreateManyWithoutCategoryInput>;
}

export interface SubCategoryUpdateInput {
  category?: Maybe<CategoryUpdateManyWithoutSubcategoryInput>;
  name?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface CategoryUpdateManyWithoutSubcategoryInput {
  create?: Maybe<
    | CategoryCreateWithoutSubcategoryInput[]
    | CategoryCreateWithoutSubcategoryInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutSubcategoryInput[]
    | CategoryUpdateWithWhereUniqueWithoutSubcategoryInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutSubcategoryInput[]
    | CategoryUpsertWithWhereUniqueWithoutSubcategoryInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutSubcategoryInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutSubcategoryDataInput;
}

export interface CategoryUpdateWithoutSubcategoryDataInput {
  contract?: Maybe<ContractUpdateManyWithoutCategoryInput>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  nameFr?: Maybe<String>;
  nameNl?: Maybe<String>;
  photo?: Maybe<String>;
  provider?: Maybe<ProviderUpdateManyWithoutCategoryInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutSubcategoryInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutSubcategoryDataInput;
  create: CategoryCreateWithoutSubcategoryInput;
}

export interface SubCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface UserCreateInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email: String;
  givenName: String;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name: String;
  numberlogin: Int;
  provider?: Maybe<ProviderCreateManyWithoutUserInput>;
  tempPwd?: Maybe<String>;
}

export interface ProviderCreateManyWithoutUserInput {
  create?: Maybe<
    ProviderCreateWithoutUserInput[] | ProviderCreateWithoutUserInput
  >;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutUserInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractCreateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name: String;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryCreateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewCreateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaCreateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface UserUpdateInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  provider?: Maybe<ProviderUpdateManyWithoutUserInput>;
  tempPwd?: Maybe<String>;
}

export interface ProviderUpdateManyWithoutUserInput {
  create?: Maybe<
    ProviderCreateWithoutUserInput[] | ProviderCreateWithoutUserInput
  >;
  delete?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  set?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  disconnect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  update?: Maybe<
    | ProviderUpdateWithWhereUniqueWithoutUserInput[]
    | ProviderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProviderUpsertWithWhereUniqueWithoutUserInput[]
    | ProviderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  updateMany?: Maybe<
    | ProviderUpdateManyWithWhereNestedInput[]
    | ProviderUpdateManyWithWhereNestedInput
  >;
}

export interface ProviderUpdateWithWhereUniqueWithoutUserInput {
  where: ProviderWhereUniqueInput;
  data: ProviderUpdateWithoutUserDataInput;
}

export interface ProviderUpdateWithoutUserDataInput {
  address?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProviderInput>;
  city?: Maybe<String>;
  contact?: Maybe<String>;
  contactEmail?: Maybe<String>;
  contacten?: Maybe<String>;
  contactfr?: Maybe<String>;
  contactnl?: Maybe<String>;
  contract?: Maybe<ContractUpdateManyWithoutProviderInput>;
  countryId?: Maybe<Int>;
  email?: Maybe<String>;
  emailen?: Maybe<String>;
  emailfr?: Maybe<String>;
  emailnl?: Maybe<String>;
  faq?: Maybe<String>;
  faqen?: Maybe<String>;
  faqfr?: Maybe<String>;
  faqnl?: Maybe<String>;
  login?: Maybe<String>;
  loginen?: Maybe<String>;
  loginfr?: Maybe<String>;
  loginnl?: Maybe<String>;
  logo?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  phoneen?: Maybe<String>;
  phonefr?: Maybe<String>;
  phonenl?: Maybe<String>;
  priceCategory?: Maybe<PriceCategoryUpdateOneWithoutProviderInput>;
  pricingAVG?: Maybe<Float>;
  ratingAVG?: Maybe<Float>;
  review?: Maybe<ReviewUpdateManyWithoutProviderInput>;
  shops?: Maybe<String>;
  site?: Maybe<String>;
  siteen?: Maybe<String>;
  sitefr?: Maybe<String>;
  sitenl?: Maybe<String>;
  socialMedia?: Maybe<SocialMediaUpdateManyWithoutProviderInput>;
  street?: Maybe<String>;
  test?: Maybe<String>;
  testJson?: Maybe<String>;
  tva?: Maybe<String>;
  verified?: Maybe<Boolean>;
  widgetId?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ProviderUpsertWithWhereUniqueWithoutUserInput {
  where: ProviderWhereUniqueInput;
  update: ProviderUpdateWithoutUserDataInput;
  create: ProviderCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  allowedToConnect?: Maybe<Boolean>;
  changedPwd?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  lang?: Maybe<String>;
  lastlogin?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  numberlogin?: Maybe<Int>;
  tempPwd?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface ContractSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContractWhereInput>;
  AND?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
  OR?: Maybe<ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput>;
  NOT?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface NewsletterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NewsletterWhereInput>;
  AND?: Maybe<
    NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput
  >;
  OR?: Maybe<
    NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput
  >;
}

export interface PriceCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PriceCategoryWhereInput>;
  AND?: Maybe<
    PriceCategorySubscriptionWhereInput[] | PriceCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    PriceCategorySubscriptionWhereInput[] | PriceCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    PriceCategorySubscriptionWhereInput[] | PriceCategorySubscriptionWhereInput
  >;
}

export interface ProviderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProviderWhereInput>;
  AND?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
  OR?: Maybe<ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput>;
  NOT?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface SocialMediaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialMediaWhereInput>;
  AND?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
  OR?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
}

export interface SubCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubCategoryWhereInput>;
  AND?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: Int;
  createdAt?: DateTimeOutput;
  description?: String;
  name: String;
  nameFr?: String;
  nameNl?: String;
  photo?: String;
  updatedAt?: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<Int>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  nameFr: () => Promise<String>;
  nameNl: () => Promise<String>;
  photo: () => Promise<String>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subcategory: <T = SubCategoryPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  contract: <T = Promise<AsyncIterator<ContractSubscription>>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nameFr: () => Promise<AsyncIterator<String>>;
  nameNl: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  provider: <T = Promise<AsyncIterator<ProviderSubscription>>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subcategory: <T = SubCategorySubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<Int>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  nameFr: () => Promise<String>;
  nameNl: () => Promise<String>;
  photo: () => Promise<String>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subcategory: <T = SubCategoryPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Contract {
  id: Int;
  accountManagerEmail?: String;
  accountManagerGSM?: String;
  accountManagerName?: String;
  accountManagerPhone?: String;
  clientNumber?: String;
  contractAutoReconduct?: Boolean;
  contractBudget?: Float;
  contractEndingAlert?: Boolean;
  contractEndingAlertTime?: Int;
  contractID: String;
  contractNumber?: String;
  contractPreavis?: Int;
  contractStart?: DateTimeOutput;
  contractTime?: Int;
  contractType?: String;
  selectionID?: String;
}

export interface ContractPromise extends Promise<Contract>, Fragmentable {
  id: () => Promise<Int>;
  accountManagerEmail: () => Promise<String>;
  accountManagerGSM: () => Promise<String>;
  accountManagerName: () => Promise<String>;
  accountManagerPhone: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  clientNumber: () => Promise<String>;
  contractAutoReconduct: () => Promise<Boolean>;
  contractBudget: () => Promise<Float>;
  contractEndingAlert: () => Promise<Boolean>;
  contractEndingAlertTime: () => Promise<Int>;
  contractID: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractPreavis: () => Promise<Int>;
  contractStart: () => Promise<DateTimeOutput>;
  contractTime: () => Promise<Int>;
  contractType: () => Promise<String>;
  customer: <T = CustomerPromise>() => T;
  provider: <T = ProviderPromise>() => T;
  selectionID: () => Promise<String>;
}

export interface ContractSubscription
  extends Promise<AsyncIterator<Contract>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  accountManagerEmail: () => Promise<AsyncIterator<String>>;
  accountManagerGSM: () => Promise<AsyncIterator<String>>;
  accountManagerName: () => Promise<AsyncIterator<String>>;
  accountManagerPhone: () => Promise<AsyncIterator<String>>;
  category: <T = CategorySubscription>() => T;
  clientNumber: () => Promise<AsyncIterator<String>>;
  contractAutoReconduct: () => Promise<AsyncIterator<Boolean>>;
  contractBudget: () => Promise<AsyncIterator<Float>>;
  contractEndingAlert: () => Promise<AsyncIterator<Boolean>>;
  contractEndingAlertTime: () => Promise<AsyncIterator<Int>>;
  contractID: () => Promise<AsyncIterator<String>>;
  contractNumber: () => Promise<AsyncIterator<String>>;
  contractPreavis: () => Promise<AsyncIterator<Int>>;
  contractStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  contractTime: () => Promise<AsyncIterator<Int>>;
  contractType: () => Promise<AsyncIterator<String>>;
  customer: <T = CustomerSubscription>() => T;
  provider: <T = ProviderSubscription>() => T;
  selectionID: () => Promise<AsyncIterator<String>>;
}

export interface ContractNullablePromise
  extends Promise<Contract | null>,
    Fragmentable {
  id: () => Promise<Int>;
  accountManagerEmail: () => Promise<String>;
  accountManagerGSM: () => Promise<String>;
  accountManagerName: () => Promise<String>;
  accountManagerPhone: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  clientNumber: () => Promise<String>;
  contractAutoReconduct: () => Promise<Boolean>;
  contractBudget: () => Promise<Float>;
  contractEndingAlert: () => Promise<Boolean>;
  contractEndingAlertTime: () => Promise<Int>;
  contractID: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractPreavis: () => Promise<Int>;
  contractStart: () => Promise<DateTimeOutput>;
  contractTime: () => Promise<Int>;
  contractType: () => Promise<String>;
  customer: <T = CustomerPromise>() => T;
  provider: <T = ProviderPromise>() => T;
  selectionID: () => Promise<String>;
}

export interface Customer {
  id: Int;
  companyAddress?: String;
  companyCity?: String;
  companyCountry?: String;
  companyEmployee?: Int;
  companyName?: String;
  companyPhone?: String;
  companySize?: String;
  companyTva?: String;
  companyWebsite?: String;
  companyZip?: String;
  countryCode?: String;
  createdAt?: DateTimeOutput;
  email: String;
  emailPro?: String;
  familyName: String;
  favProvs?: String;
  givenName: String;
  gsm?: String;
  headline?: String;
  lang?: String;
  lastlogin?: DateTimeOutput;
  name: String;
  numberlogin: Int;
  phone?: String;
  picture: String;
  title?: String;
  tuto?: Boolean;
  updatedAt?: DateTimeOutput;
  userId: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<Int>;
  companyAddress: () => Promise<String>;
  companyCity: () => Promise<String>;
  companyCountry: () => Promise<String>;
  companyEmployee: () => Promise<Int>;
  companyName: () => Promise<String>;
  companyPhone: () => Promise<String>;
  companySize: () => Promise<String>;
  companyTva: () => Promise<String>;
  companyWebsite: () => Promise<String>;
  companyZip: () => Promise<String>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryCode: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailPro: () => Promise<String>;
  familyName: () => Promise<String>;
  favProvs: () => Promise<String>;
  givenName: () => Promise<String>;
  gsm: () => Promise<String>;
  headline: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  phone: () => Promise<String>;
  picture: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  tuto: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyAddress: () => Promise<AsyncIterator<String>>;
  companyCity: () => Promise<AsyncIterator<String>>;
  companyCountry: () => Promise<AsyncIterator<String>>;
  companyEmployee: () => Promise<AsyncIterator<Int>>;
  companyName: () => Promise<AsyncIterator<String>>;
  companyPhone: () => Promise<AsyncIterator<String>>;
  companySize: () => Promise<AsyncIterator<String>>;
  companyTva: () => Promise<AsyncIterator<String>>;
  companyWebsite: () => Promise<AsyncIterator<String>>;
  companyZip: () => Promise<AsyncIterator<String>>;
  contract: <T = Promise<AsyncIterator<ContractSubscription>>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryCode: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailPro: () => Promise<AsyncIterator<String>>;
  familyName: () => Promise<AsyncIterator<String>>;
  favProvs: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  gsm: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  lang: () => Promise<AsyncIterator<String>>;
  lastlogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  numberlogin: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  review: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
  tuto: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<Int>;
  companyAddress: () => Promise<String>;
  companyCity: () => Promise<String>;
  companyCountry: () => Promise<String>;
  companyEmployee: () => Promise<Int>;
  companyName: () => Promise<String>;
  companyPhone: () => Promise<String>;
  companySize: () => Promise<String>;
  companyTva: () => Promise<String>;
  companyWebsite: () => Promise<String>;
  companyZip: () => Promise<String>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryCode: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailPro: () => Promise<String>;
  familyName: () => Promise<String>;
  favProvs: () => Promise<String>;
  givenName: () => Promise<String>;
  gsm: () => Promise<String>;
  headline: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  phone: () => Promise<String>;
  picture: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  tuto: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
}

export interface Review {
  id: Int;
  content: String;
  contentEn?: String;
  contentFr?: String;
  contentNl?: String;
  createdAt?: DateTimeOutput;
  originalLang?: String;
  pricing?: Int;
  rating: Int;
  reply?: String;
  replyCreatedAt?: DateTimeOutput;
  replyEn?: String;
  replyFr?: String;
  replyNl?: String;
  replyOriginal?: String;
  title: String;
  titleEn?: String;
  titleFr?: String;
  titleNl?: String;
  updatedAt?: DateTimeOutput;
  upvote?: Int;
  userId?: String;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<Int>;
  author: <T = CustomerPromise>() => T;
  content: () => Promise<String>;
  contentEn: () => Promise<String>;
  contentFr: () => Promise<String>;
  contentNl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  originalLang: () => Promise<String>;
  pricing: () => Promise<Int>;
  provider: <T = ProviderPromise>() => T;
  rating: () => Promise<Int>;
  reply: () => Promise<String>;
  replyCreatedAt: () => Promise<DateTimeOutput>;
  replyEn: () => Promise<String>;
  replyFr: () => Promise<String>;
  replyNl: () => Promise<String>;
  replyOriginal: () => Promise<String>;
  title: () => Promise<String>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  titleNl: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  upvote: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  author: <T = CustomerSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  contentEn: () => Promise<AsyncIterator<String>>;
  contentFr: () => Promise<AsyncIterator<String>>;
  contentNl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  originalLang: () => Promise<AsyncIterator<String>>;
  pricing: () => Promise<AsyncIterator<Int>>;
  provider: <T = ProviderSubscription>() => T;
  rating: () => Promise<AsyncIterator<Int>>;
  reply: () => Promise<AsyncIterator<String>>;
  replyCreatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  replyEn: () => Promise<AsyncIterator<String>>;
  replyFr: () => Promise<AsyncIterator<String>>;
  replyNl: () => Promise<AsyncIterator<String>>;
  replyOriginal: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  titleEn: () => Promise<AsyncIterator<String>>;
  titleFr: () => Promise<AsyncIterator<String>>;
  titleNl: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upvote: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<Int>;
  author: <T = CustomerPromise>() => T;
  content: () => Promise<String>;
  contentEn: () => Promise<String>;
  contentFr: () => Promise<String>;
  contentNl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  originalLang: () => Promise<String>;
  pricing: () => Promise<Int>;
  provider: <T = ProviderPromise>() => T;
  rating: () => Promise<Int>;
  reply: () => Promise<String>;
  replyCreatedAt: () => Promise<DateTimeOutput>;
  replyEn: () => Promise<String>;
  replyFr: () => Promise<String>;
  replyNl: () => Promise<String>;
  replyOriginal: () => Promise<String>;
  title: () => Promise<String>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  titleNl: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  upvote: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface Provider {
  id: Int;
  address?: String;
  city?: String;
  contact?: String;
  contactEmail?: String;
  contacten?: String;
  contactfr?: String;
  contactnl?: String;
  countryId?: Int;
  createdAt?: DateTimeOutput;
  email?: String;
  emailen?: String;
  emailfr?: String;
  emailnl?: String;
  faq?: String;
  faqen?: String;
  faqfr?: String;
  faqnl?: String;
  login?: String;
  loginen?: String;
  loginfr?: String;
  loginnl?: String;
  logo?: String;
  name: String;
  phone?: String;
  phoneen?: String;
  phonefr?: String;
  phonenl?: String;
  pricingAVG?: Float;
  ratingAVG?: Float;
  shops?: String;
  site?: String;
  siteen?: String;
  sitefr?: String;
  sitenl?: String;
  street?: String;
  test?: String;
  testJson?: String;
  tva?: String;
  updatedAt?: DateTimeOutput;
  verified?: Boolean;
  widgetId?: String;
  zip?: String;
}

export interface ProviderPromise extends Promise<Provider>, Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  city: () => Promise<String>;
  contact: () => Promise<String>;
  contactEmail: () => Promise<String>;
  contacten: () => Promise<String>;
  contactfr: () => Promise<String>;
  contactnl: () => Promise<String>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailen: () => Promise<String>;
  emailfr: () => Promise<String>;
  emailnl: () => Promise<String>;
  faq: () => Promise<String>;
  faqen: () => Promise<String>;
  faqfr: () => Promise<String>;
  faqnl: () => Promise<String>;
  login: () => Promise<String>;
  loginen: () => Promise<String>;
  loginfr: () => Promise<String>;
  loginnl: () => Promise<String>;
  logo: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  phoneen: () => Promise<String>;
  phonefr: () => Promise<String>;
  phonenl: () => Promise<String>;
  priceCategory: <T = PriceCategoryPromise>() => T;
  pricingAVG: () => Promise<Float>;
  ratingAVG: () => Promise<Float>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shops: () => Promise<String>;
  site: () => Promise<String>;
  siteen: () => Promise<String>;
  sitefr: () => Promise<String>;
  sitenl: () => Promise<String>;
  socialMedia: <T = FragmentableArray<SocialMedia>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  street: () => Promise<String>;
  test: () => Promise<String>;
  testJson: () => Promise<String>;
  tva: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verified: () => Promise<Boolean>;
  widgetId: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface ProviderSubscription
  extends Promise<AsyncIterator<Provider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  city: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  contactEmail: () => Promise<AsyncIterator<String>>;
  contacten: () => Promise<AsyncIterator<String>>;
  contactfr: () => Promise<AsyncIterator<String>>;
  contactnl: () => Promise<AsyncIterator<String>>;
  contract: <T = Promise<AsyncIterator<ContractSubscription>>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailen: () => Promise<AsyncIterator<String>>;
  emailfr: () => Promise<AsyncIterator<String>>;
  emailnl: () => Promise<AsyncIterator<String>>;
  faq: () => Promise<AsyncIterator<String>>;
  faqen: () => Promise<AsyncIterator<String>>;
  faqfr: () => Promise<AsyncIterator<String>>;
  faqnl: () => Promise<AsyncIterator<String>>;
  login: () => Promise<AsyncIterator<String>>;
  loginen: () => Promise<AsyncIterator<String>>;
  loginfr: () => Promise<AsyncIterator<String>>;
  loginnl: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phoneen: () => Promise<AsyncIterator<String>>;
  phonefr: () => Promise<AsyncIterator<String>>;
  phonenl: () => Promise<AsyncIterator<String>>;
  priceCategory: <T = PriceCategorySubscription>() => T;
  pricingAVG: () => Promise<AsyncIterator<Float>>;
  ratingAVG: () => Promise<AsyncIterator<Float>>;
  review: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shops: () => Promise<AsyncIterator<String>>;
  site: () => Promise<AsyncIterator<String>>;
  siteen: () => Promise<AsyncIterator<String>>;
  sitefr: () => Promise<AsyncIterator<String>>;
  sitenl: () => Promise<AsyncIterator<String>>;
  socialMedia: <T = Promise<AsyncIterator<SocialMediaSubscription>>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  street: () => Promise<AsyncIterator<String>>;
  test: () => Promise<AsyncIterator<String>>;
  testJson: () => Promise<AsyncIterator<String>>;
  tva: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verified: () => Promise<AsyncIterator<Boolean>>;
  widgetId: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
}

export interface ProviderNullablePromise
  extends Promise<Provider | null>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  city: () => Promise<String>;
  contact: () => Promise<String>;
  contactEmail: () => Promise<String>;
  contacten: () => Promise<String>;
  contactfr: () => Promise<String>;
  contactnl: () => Promise<String>;
  contract: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  countryId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailen: () => Promise<String>;
  emailfr: () => Promise<String>;
  emailnl: () => Promise<String>;
  faq: () => Promise<String>;
  faqen: () => Promise<String>;
  faqfr: () => Promise<String>;
  faqnl: () => Promise<String>;
  login: () => Promise<String>;
  loginen: () => Promise<String>;
  loginfr: () => Promise<String>;
  loginnl: () => Promise<String>;
  logo: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  phoneen: () => Promise<String>;
  phonefr: () => Promise<String>;
  phonenl: () => Promise<String>;
  priceCategory: <T = PriceCategoryPromise>() => T;
  pricingAVG: () => Promise<Float>;
  ratingAVG: () => Promise<Float>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shops: () => Promise<String>;
  site: () => Promise<String>;
  siteen: () => Promise<String>;
  sitefr: () => Promise<String>;
  sitenl: () => Promise<String>;
  socialMedia: <T = FragmentableArray<SocialMedia>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  street: () => Promise<String>;
  test: () => Promise<String>;
  testJson: () => Promise<String>;
  tva: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verified: () => Promise<Boolean>;
  widgetId: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface PriceCategory {
  id: Int;
  name: String;
}

export interface PriceCategoryPromise
  extends Promise<PriceCategory>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PriceCategorySubscription
  extends Promise<AsyncIterator<PriceCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  provider: <T = Promise<AsyncIterator<ProviderSubscription>>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PriceCategoryNullablePromise
  extends Promise<PriceCategory | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SocialMedia {
  id: Int;
  createdAt?: DateTimeOutput;
  facebook?: String;
  linkedin?: String;
  twitter?: String;
  updatedAt?: DateTimeOutput;
}

export interface SocialMediaPromise extends Promise<SocialMedia>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  facebook: () => Promise<String>;
  linkedin: () => Promise<String>;
  provider: <T = ProviderPromise>() => T;
  twitter: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SocialMediaSubscription
  extends Promise<AsyncIterator<SocialMedia>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  facebook: () => Promise<AsyncIterator<String>>;
  linkedin: () => Promise<AsyncIterator<String>>;
  provider: <T = ProviderSubscription>() => T;
  twitter: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SocialMediaNullablePromise
  extends Promise<SocialMedia | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  facebook: () => Promise<String>;
  linkedin: () => Promise<String>;
  provider: <T = ProviderPromise>() => T;
  twitter: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: Int;
  allowedToConnect?: Boolean;
  changedPwd?: String;
  createdAt?: DateTimeOutput;
  email: String;
  givenName: String;
  lang?: String;
  lastlogin?: DateTimeOutput;
  name: String;
  numberlogin: Int;
  tempPwd?: String;
  updatedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  allowedToConnect: () => Promise<Boolean>;
  changedPwd: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tempPwd: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  allowedToConnect: () => Promise<AsyncIterator<Boolean>>;
  changedPwd: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  lang: () => Promise<AsyncIterator<String>>;
  lastlogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  numberlogin: () => Promise<AsyncIterator<Int>>;
  provider: <T = Promise<AsyncIterator<ProviderSubscription>>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tempPwd: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<Int>;
  allowedToConnect: () => Promise<Boolean>;
  changedPwd: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  provider: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tempPwd: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SubCategory {
  id: Int;
  name: String;
  photo?: String;
}

export interface SubCategoryPromise extends Promise<SubCategory>, Fragmentable {
  id: () => Promise<Int>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface SubCategorySubscription
  extends Promise<AsyncIterator<SubCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface SubCategoryNullablePromise
  extends Promise<SubCategory | null>,
    Fragmentable {
  id: () => Promise<Int>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContractConnection {
  pageInfo: PageInfo;
  edges: ContractEdge[];
}

export interface ContractConnectionPromise
  extends Promise<ContractConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContractEdge>>() => T;
  aggregate: <T = AggregateContractPromise>() => T;
}

export interface ContractConnectionSubscription
  extends Promise<AsyncIterator<ContractConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContractEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContractSubscription>() => T;
}

export interface ContractEdge {
  node: Contract;
  cursor: String;
}

export interface ContractEdgePromise
  extends Promise<ContractEdge>,
    Fragmentable {
  node: <T = ContractPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContractEdgeSubscription
  extends Promise<AsyncIterator<ContractEdge>>,
    Fragmentable {
  node: <T = ContractSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContract {
  count: Int;
}

export interface AggregateContractPromise
  extends Promise<AggregateContract>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContractSubscription
  extends Promise<AsyncIterator<AggregateContract>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Newsletter {
  id: Int;
  createdAt?: DateTimeOutput;
  email: String;
}

export interface NewsletterPromise extends Promise<Newsletter>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
}

export interface NewsletterSubscription
  extends Promise<AsyncIterator<Newsletter>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface NewsletterNullablePromise
  extends Promise<Newsletter | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
}

export interface NewsletterConnection {
  pageInfo: PageInfo;
  edges: NewsletterEdge[];
}

export interface NewsletterConnectionPromise
  extends Promise<NewsletterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NewsletterEdge>>() => T;
  aggregate: <T = AggregateNewsletterPromise>() => T;
}

export interface NewsletterConnectionSubscription
  extends Promise<AsyncIterator<NewsletterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NewsletterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNewsletterSubscription>() => T;
}

export interface NewsletterEdge {
  node: Newsletter;
  cursor: String;
}

export interface NewsletterEdgePromise
  extends Promise<NewsletterEdge>,
    Fragmentable {
  node: <T = NewsletterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NewsletterEdgeSubscription
  extends Promise<AsyncIterator<NewsletterEdge>>,
    Fragmentable {
  node: <T = NewsletterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNewsletter {
  count: Int;
}

export interface AggregateNewsletterPromise
  extends Promise<AggregateNewsletter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNewsletterSubscription
  extends Promise<AsyncIterator<AggregateNewsletter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PriceCategoryConnection {
  pageInfo: PageInfo;
  edges: PriceCategoryEdge[];
}

export interface PriceCategoryConnectionPromise
  extends Promise<PriceCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PriceCategoryEdge>>() => T;
  aggregate: <T = AggregatePriceCategoryPromise>() => T;
}

export interface PriceCategoryConnectionSubscription
  extends Promise<AsyncIterator<PriceCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PriceCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePriceCategorySubscription>() => T;
}

export interface PriceCategoryEdge {
  node: PriceCategory;
  cursor: String;
}

export interface PriceCategoryEdgePromise
  extends Promise<PriceCategoryEdge>,
    Fragmentable {
  node: <T = PriceCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PriceCategoryEdgeSubscription
  extends Promise<AsyncIterator<PriceCategoryEdge>>,
    Fragmentable {
  node: <T = PriceCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePriceCategory {
  count: Int;
}

export interface AggregatePriceCategoryPromise
  extends Promise<AggregatePriceCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePriceCategorySubscription
  extends Promise<AsyncIterator<AggregatePriceCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProviderConnection {
  pageInfo: PageInfo;
  edges: ProviderEdge[];
}

export interface ProviderConnectionPromise
  extends Promise<ProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProviderEdge>>() => T;
  aggregate: <T = AggregateProviderPromise>() => T;
}

export interface ProviderConnectionSubscription
  extends Promise<AsyncIterator<ProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProviderSubscription>() => T;
}

export interface ProviderEdge {
  node: Provider;
  cursor: String;
}

export interface ProviderEdgePromise
  extends Promise<ProviderEdge>,
    Fragmentable {
  node: <T = ProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProviderEdgeSubscription
  extends Promise<AsyncIterator<ProviderEdge>>,
    Fragmentable {
  node: <T = ProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProvider {
  count: Int;
}

export interface AggregateProviderPromise
  extends Promise<AggregateProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProviderSubscription
  extends Promise<AsyncIterator<AggregateProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialMediaConnection {
  pageInfo: PageInfo;
  edges: SocialMediaEdge[];
}

export interface SocialMediaConnectionPromise
  extends Promise<SocialMediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialMediaEdge>>() => T;
  aggregate: <T = AggregateSocialMediaPromise>() => T;
}

export interface SocialMediaConnectionSubscription
  extends Promise<AsyncIterator<SocialMediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialMediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialMediaSubscription>() => T;
}

export interface SocialMediaEdge {
  node: SocialMedia;
  cursor: String;
}

export interface SocialMediaEdgePromise
  extends Promise<SocialMediaEdge>,
    Fragmentable {
  node: <T = SocialMediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialMediaEdgeSubscription
  extends Promise<AsyncIterator<SocialMediaEdge>>,
    Fragmentable {
  node: <T = SocialMediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialMedia {
  count: Int;
}

export interface AggregateSocialMediaPromise
  extends Promise<AggregateSocialMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialMediaSubscription
  extends Promise<AsyncIterator<AggregateSocialMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubCategoryConnection {
  pageInfo: PageInfo;
  edges: SubCategoryEdge[];
}

export interface SubCategoryConnectionPromise
  extends Promise<SubCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubCategoryEdge>>() => T;
  aggregate: <T = AggregateSubCategoryPromise>() => T;
}

export interface SubCategoryConnectionSubscription
  extends Promise<AsyncIterator<SubCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubCategorySubscription>() => T;
}

export interface SubCategoryEdge {
  node: SubCategory;
  cursor: String;
}

export interface SubCategoryEdgePromise
  extends Promise<SubCategoryEdge>,
    Fragmentable {
  node: <T = SubCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubCategoryEdgeSubscription
  extends Promise<AsyncIterator<SubCategoryEdge>>,
    Fragmentable {
  node: <T = SubCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubCategory {
  count: Int;
}

export interface AggregateSubCategoryPromise
  extends Promise<AggregateSubCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubCategorySubscription
  extends Promise<AsyncIterator<AggregateSubCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: Int;
  createdAt?: DateTimeOutput;
  description?: String;
  name: String;
  nameFr?: String;
  nameNl?: String;
  photo?: String;
  updatedAt?: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  nameFr: () => Promise<String>;
  nameNl: () => Promise<String>;
  photo: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nameFr: () => Promise<AsyncIterator<String>>;
  nameNl: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContractSubscriptionPayload {
  mutation: MutationType;
  node: Contract;
  updatedFields: String[];
  previousValues: ContractPreviousValues;
}

export interface ContractSubscriptionPayloadPromise
  extends Promise<ContractSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContractPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContractPreviousValuesPromise>() => T;
}

export interface ContractSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContractSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContractSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContractPreviousValuesSubscription>() => T;
}

export interface ContractPreviousValues {
  id: Int;
  accountManagerEmail?: String;
  accountManagerGSM?: String;
  accountManagerName?: String;
  accountManagerPhone?: String;
  clientNumber?: String;
  contractAutoReconduct?: Boolean;
  contractBudget?: Float;
  contractEndingAlert?: Boolean;
  contractEndingAlertTime?: Int;
  contractID: String;
  contractNumber?: String;
  contractPreavis?: Int;
  contractStart?: DateTimeOutput;
  contractTime?: Int;
  contractType?: String;
  selectionID?: String;
}

export interface ContractPreviousValuesPromise
  extends Promise<ContractPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  accountManagerEmail: () => Promise<String>;
  accountManagerGSM: () => Promise<String>;
  accountManagerName: () => Promise<String>;
  accountManagerPhone: () => Promise<String>;
  clientNumber: () => Promise<String>;
  contractAutoReconduct: () => Promise<Boolean>;
  contractBudget: () => Promise<Float>;
  contractEndingAlert: () => Promise<Boolean>;
  contractEndingAlertTime: () => Promise<Int>;
  contractID: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractPreavis: () => Promise<Int>;
  contractStart: () => Promise<DateTimeOutput>;
  contractTime: () => Promise<Int>;
  contractType: () => Promise<String>;
  selectionID: () => Promise<String>;
}

export interface ContractPreviousValuesSubscription
  extends Promise<AsyncIterator<ContractPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  accountManagerEmail: () => Promise<AsyncIterator<String>>;
  accountManagerGSM: () => Promise<AsyncIterator<String>>;
  accountManagerName: () => Promise<AsyncIterator<String>>;
  accountManagerPhone: () => Promise<AsyncIterator<String>>;
  clientNumber: () => Promise<AsyncIterator<String>>;
  contractAutoReconduct: () => Promise<AsyncIterator<Boolean>>;
  contractBudget: () => Promise<AsyncIterator<Float>>;
  contractEndingAlert: () => Promise<AsyncIterator<Boolean>>;
  contractEndingAlertTime: () => Promise<AsyncIterator<Int>>;
  contractID: () => Promise<AsyncIterator<String>>;
  contractNumber: () => Promise<AsyncIterator<String>>;
  contractPreavis: () => Promise<AsyncIterator<Int>>;
  contractStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  contractTime: () => Promise<AsyncIterator<Int>>;
  contractType: () => Promise<AsyncIterator<String>>;
  selectionID: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: Int;
  companyAddress?: String;
  companyCity?: String;
  companyCountry?: String;
  companyEmployee?: Int;
  companyName?: String;
  companyPhone?: String;
  companySize?: String;
  companyTva?: String;
  companyWebsite?: String;
  companyZip?: String;
  countryCode?: String;
  createdAt?: DateTimeOutput;
  email: String;
  emailPro?: String;
  familyName: String;
  favProvs?: String;
  givenName: String;
  gsm?: String;
  headline?: String;
  lang?: String;
  lastlogin?: DateTimeOutput;
  name: String;
  numberlogin: Int;
  phone?: String;
  picture: String;
  title?: String;
  tuto?: Boolean;
  updatedAt?: DateTimeOutput;
  userId: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  companyAddress: () => Promise<String>;
  companyCity: () => Promise<String>;
  companyCountry: () => Promise<String>;
  companyEmployee: () => Promise<Int>;
  companyName: () => Promise<String>;
  companyPhone: () => Promise<String>;
  companySize: () => Promise<String>;
  companyTva: () => Promise<String>;
  companyWebsite: () => Promise<String>;
  companyZip: () => Promise<String>;
  countryCode: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailPro: () => Promise<String>;
  familyName: () => Promise<String>;
  favProvs: () => Promise<String>;
  givenName: () => Promise<String>;
  gsm: () => Promise<String>;
  headline: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  phone: () => Promise<String>;
  picture: () => Promise<String>;
  title: () => Promise<String>;
  tuto: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyAddress: () => Promise<AsyncIterator<String>>;
  companyCity: () => Promise<AsyncIterator<String>>;
  companyCountry: () => Promise<AsyncIterator<String>>;
  companyEmployee: () => Promise<AsyncIterator<Int>>;
  companyName: () => Promise<AsyncIterator<String>>;
  companyPhone: () => Promise<AsyncIterator<String>>;
  companySize: () => Promise<AsyncIterator<String>>;
  companyTva: () => Promise<AsyncIterator<String>>;
  companyWebsite: () => Promise<AsyncIterator<String>>;
  companyZip: () => Promise<AsyncIterator<String>>;
  countryCode: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailPro: () => Promise<AsyncIterator<String>>;
  familyName: () => Promise<AsyncIterator<String>>;
  favProvs: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  gsm: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  lang: () => Promise<AsyncIterator<String>>;
  lastlogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  numberlogin: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  tuto: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface NewsletterSubscriptionPayload {
  mutation: MutationType;
  node: Newsletter;
  updatedFields: String[];
  previousValues: NewsletterPreviousValues;
}

export interface NewsletterSubscriptionPayloadPromise
  extends Promise<NewsletterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NewsletterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NewsletterPreviousValuesPromise>() => T;
}

export interface NewsletterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NewsletterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NewsletterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NewsletterPreviousValuesSubscription>() => T;
}

export interface NewsletterPreviousValues {
  id: Int;
  createdAt?: DateTimeOutput;
  email: String;
}

export interface NewsletterPreviousValuesPromise
  extends Promise<NewsletterPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
}

export interface NewsletterPreviousValuesSubscription
  extends Promise<AsyncIterator<NewsletterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface PriceCategorySubscriptionPayload {
  mutation: MutationType;
  node: PriceCategory;
  updatedFields: String[];
  previousValues: PriceCategoryPreviousValues;
}

export interface PriceCategorySubscriptionPayloadPromise
  extends Promise<PriceCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PriceCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PriceCategoryPreviousValuesPromise>() => T;
}

export interface PriceCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PriceCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PriceCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PriceCategoryPreviousValuesSubscription>() => T;
}

export interface PriceCategoryPreviousValues {
  id: Int;
  name: String;
}

export interface PriceCategoryPreviousValuesPromise
  extends Promise<PriceCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface PriceCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<PriceCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProviderSubscriptionPayload {
  mutation: MutationType;
  node: Provider;
  updatedFields: String[];
  previousValues: ProviderPreviousValues;
}

export interface ProviderSubscriptionPayloadPromise
  extends Promise<ProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProviderPreviousValuesPromise>() => T;
}

export interface ProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProviderPreviousValuesSubscription>() => T;
}

export interface ProviderPreviousValues {
  id: Int;
  address?: String;
  city?: String;
  contact?: String;
  contactEmail?: String;
  contacten?: String;
  contactfr?: String;
  contactnl?: String;
  countryId?: Int;
  createdAt?: DateTimeOutput;
  email?: String;
  emailen?: String;
  emailfr?: String;
  emailnl?: String;
  faq?: String;
  faqen?: String;
  faqfr?: String;
  faqnl?: String;
  login?: String;
  loginen?: String;
  loginfr?: String;
  loginnl?: String;
  logo?: String;
  name: String;
  phone?: String;
  phoneen?: String;
  phonefr?: String;
  phonenl?: String;
  pricingAVG?: Float;
  ratingAVG?: Float;
  shops?: String;
  site?: String;
  siteen?: String;
  sitefr?: String;
  sitenl?: String;
  street?: String;
  test?: String;
  testJson?: String;
  tva?: String;
  updatedAt?: DateTimeOutput;
  verified?: Boolean;
  widgetId?: String;
  zip?: String;
}

export interface ProviderPreviousValuesPromise
  extends Promise<ProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  contact: () => Promise<String>;
  contactEmail: () => Promise<String>;
  contacten: () => Promise<String>;
  contactfr: () => Promise<String>;
  contactnl: () => Promise<String>;
  countryId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailen: () => Promise<String>;
  emailfr: () => Promise<String>;
  emailnl: () => Promise<String>;
  faq: () => Promise<String>;
  faqen: () => Promise<String>;
  faqfr: () => Promise<String>;
  faqnl: () => Promise<String>;
  login: () => Promise<String>;
  loginen: () => Promise<String>;
  loginfr: () => Promise<String>;
  loginnl: () => Promise<String>;
  logo: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  phoneen: () => Promise<String>;
  phonefr: () => Promise<String>;
  phonenl: () => Promise<String>;
  pricingAVG: () => Promise<Float>;
  ratingAVG: () => Promise<Float>;
  shops: () => Promise<String>;
  site: () => Promise<String>;
  siteen: () => Promise<String>;
  sitefr: () => Promise<String>;
  sitenl: () => Promise<String>;
  street: () => Promise<String>;
  test: () => Promise<String>;
  testJson: () => Promise<String>;
  tva: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  verified: () => Promise<Boolean>;
  widgetId: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface ProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<ProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  contactEmail: () => Promise<AsyncIterator<String>>;
  contacten: () => Promise<AsyncIterator<String>>;
  contactfr: () => Promise<AsyncIterator<String>>;
  contactnl: () => Promise<AsyncIterator<String>>;
  countryId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailen: () => Promise<AsyncIterator<String>>;
  emailfr: () => Promise<AsyncIterator<String>>;
  emailnl: () => Promise<AsyncIterator<String>>;
  faq: () => Promise<AsyncIterator<String>>;
  faqen: () => Promise<AsyncIterator<String>>;
  faqfr: () => Promise<AsyncIterator<String>>;
  faqnl: () => Promise<AsyncIterator<String>>;
  login: () => Promise<AsyncIterator<String>>;
  loginen: () => Promise<AsyncIterator<String>>;
  loginfr: () => Promise<AsyncIterator<String>>;
  loginnl: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phoneen: () => Promise<AsyncIterator<String>>;
  phonefr: () => Promise<AsyncIterator<String>>;
  phonenl: () => Promise<AsyncIterator<String>>;
  pricingAVG: () => Promise<AsyncIterator<Float>>;
  ratingAVG: () => Promise<AsyncIterator<Float>>;
  shops: () => Promise<AsyncIterator<String>>;
  site: () => Promise<AsyncIterator<String>>;
  siteen: () => Promise<AsyncIterator<String>>;
  sitefr: () => Promise<AsyncIterator<String>>;
  sitenl: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  test: () => Promise<AsyncIterator<String>>;
  testJson: () => Promise<AsyncIterator<String>>;
  tva: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  widgetId: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: Int;
  content: String;
  contentEn?: String;
  contentFr?: String;
  contentNl?: String;
  createdAt?: DateTimeOutput;
  originalLang?: String;
  pricing?: Int;
  rating: Int;
  reply?: String;
  replyCreatedAt?: DateTimeOutput;
  replyEn?: String;
  replyFr?: String;
  replyNl?: String;
  replyOriginal?: String;
  title: String;
  titleEn?: String;
  titleFr?: String;
  titleNl?: String;
  updatedAt?: DateTimeOutput;
  upvote?: Int;
  userId?: String;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  contentEn: () => Promise<String>;
  contentFr: () => Promise<String>;
  contentNl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  originalLang: () => Promise<String>;
  pricing: () => Promise<Int>;
  rating: () => Promise<Int>;
  reply: () => Promise<String>;
  replyCreatedAt: () => Promise<DateTimeOutput>;
  replyEn: () => Promise<String>;
  replyFr: () => Promise<String>;
  replyNl: () => Promise<String>;
  replyOriginal: () => Promise<String>;
  title: () => Promise<String>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  titleNl: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  upvote: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  contentEn: () => Promise<AsyncIterator<String>>;
  contentFr: () => Promise<AsyncIterator<String>>;
  contentNl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  originalLang: () => Promise<AsyncIterator<String>>;
  pricing: () => Promise<AsyncIterator<Int>>;
  rating: () => Promise<AsyncIterator<Int>>;
  reply: () => Promise<AsyncIterator<String>>;
  replyCreatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  replyEn: () => Promise<AsyncIterator<String>>;
  replyFr: () => Promise<AsyncIterator<String>>;
  replyNl: () => Promise<AsyncIterator<String>>;
  replyOriginal: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  titleEn: () => Promise<AsyncIterator<String>>;
  titleFr: () => Promise<AsyncIterator<String>>;
  titleNl: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upvote: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface SocialMediaSubscriptionPayload {
  mutation: MutationType;
  node: SocialMedia;
  updatedFields: String[];
  previousValues: SocialMediaPreviousValues;
}

export interface SocialMediaSubscriptionPayloadPromise
  extends Promise<SocialMediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialMediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialMediaPreviousValuesPromise>() => T;
}

export interface SocialMediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialMediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialMediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialMediaPreviousValuesSubscription>() => T;
}

export interface SocialMediaPreviousValues {
  id: Int;
  createdAt?: DateTimeOutput;
  facebook?: String;
  linkedin?: String;
  twitter?: String;
  updatedAt?: DateTimeOutput;
}

export interface SocialMediaPreviousValuesPromise
  extends Promise<SocialMediaPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  facebook: () => Promise<String>;
  linkedin: () => Promise<String>;
  twitter: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SocialMediaPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialMediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  facebook: () => Promise<AsyncIterator<String>>;
  linkedin: () => Promise<AsyncIterator<String>>;
  twitter: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubCategorySubscriptionPayload {
  mutation: MutationType;
  node: SubCategory;
  updatedFields: String[];
  previousValues: SubCategoryPreviousValues;
}

export interface SubCategorySubscriptionPayloadPromise
  extends Promise<SubCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubCategoryPreviousValuesPromise>() => T;
}

export interface SubCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubCategoryPreviousValuesSubscription>() => T;
}

export interface SubCategoryPreviousValues {
  id: Int;
  name: String;
  photo?: String;
}

export interface SubCategoryPreviousValuesPromise
  extends Promise<SubCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface SubCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<SubCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  allowedToConnect?: Boolean;
  changedPwd?: String;
  createdAt?: DateTimeOutput;
  email: String;
  givenName: String;
  lang?: String;
  lastlogin?: DateTimeOutput;
  name: String;
  numberlogin: Int;
  tempPwd?: String;
  updatedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  allowedToConnect: () => Promise<Boolean>;
  changedPwd: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  lang: () => Promise<String>;
  lastlogin: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  numberlogin: () => Promise<Int>;
  tempPwd: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  allowedToConnect: () => Promise<AsyncIterator<Boolean>>;
  changedPwd: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  lang: () => Promise<AsyncIterator<String>>;
  lastlogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  numberlogin: () => Promise<AsyncIterator<Int>>;
  tempPwd: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Contract",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Newsletter",
    embedded: false
  },
  {
    name: "PriceCategory",
    embedded: false
  },
  {
    name: "Provider",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "SocialMedia",
    embedded: false
  },
  {
    name: "SubCategory",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
